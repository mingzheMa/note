import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,d as t}from"./app.002a81c8.js";const e={},p=t(`<h1 id="模板字符串工具" tabindex="-1"><a class="header-anchor" href="#模板字符串工具" aria-hidden="true">#</a> 模板字符串工具</h1><h2 id="include" tabindex="-1"><a class="header-anchor" href="#include" aria-hidden="true">#</a> Include</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Include<span class="token operator">&lt;</span>Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> Search <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Str <span class="token keyword">extends</span> <span class="token string">&quot;&quot;</span>
  <span class="token operator">?</span> <span class="token boolean">true</span>
  <span class="token operator">:</span> Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> _L<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Search<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> _R<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  <span class="token operator">?</span> <span class="token boolean">true</span>
  <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">IncludeRes1</span> <span class="token operator">=</span> Include<span class="token operator">&lt;</span><span class="token string">&quot;linbudu&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;lin&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token keyword">type</span> <span class="token class-name">IncludeRes2</span> <span class="token operator">=</span> Include<span class="token operator">&lt;</span><span class="token string">&quot;linbudu&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;_lin&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token keyword">type</span> <span class="token class-name">IncludeRes3</span> <span class="token operator">=</span> Include<span class="token operator">&lt;</span><span class="token string">&quot;linbudu&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token keyword">type</span> <span class="token class-name">IncludeRes4</span> <span class="token operator">=</span> Include<span class="token operator">&lt;</span><span class="token string">&quot; &quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token keyword">type</span> <span class="token class-name">IncludeRes5</span> <span class="token operator">=</span> Include<span class="token operator">&lt;</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串搜索我们通过<code>Str extends <code>\${infer _L}\${Search}\${infer _R}</code></code>就能实现字符串匹配（要搜索的部分 + 其他部分），但是空字符串是无法通过的，所以先对空字符串做了判断</p><h2 id="trim" tabindex="-1"><a class="header-anchor" href="#trim" aria-hidden="true">#</a> Trim</h2><p>有了Include的基础上我们实现Trim就简单多了</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">TrimRight<span class="token operator">&lt;</span>Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">?</span> TrimRight<span class="token operator">&lt;</span><span class="token constant">L</span><span class="token operator">&gt;</span> <span class="token operator">:</span> Str

<span class="token keyword">type</span> <span class="token class-name">Test1</span> <span class="token operator">=</span> TrimRight<span class="token operator">&lt;</span><span class="token string">&quot;123 &quot;</span><span class="token operator">&gt;</span> <span class="token comment">// &quot;123&quot;</span>
<span class="token keyword">type</span> <span class="token class-name">Test2</span> <span class="token operator">=</span> TrimRight<span class="token operator">&lt;</span><span class="token string">&quot;123 123  &quot;</span><span class="token operator">&gt;</span> <span class="token comment">// &quot;123 123&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们通过<code><code>\${infer L} </code></code>匹配右边的空格，匹配上就递归（这里为了防止右边有多个空格），否则返回当前字符串</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">TrimRight<span class="token operator">&lt;</span>Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">?</span> TrimRight<span class="token operator">&lt;</span><span class="token constant">L</span><span class="token operator">&gt;</span> <span class="token operator">:</span> Str
<span class="token keyword">type</span> <span class="token class-name">TrimLeft<span class="token operator">&lt;</span>Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">?</span> TrimLeft<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span> <span class="token operator">:</span> Str

<span class="token keyword">type</span> <span class="token class-name">Trim<span class="token operator">&lt;</span>Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> TrimLeft<span class="token operator">&lt;</span>TrimRight<span class="token operator">&lt;</span>Str<span class="token operator">&gt;&gt;</span>

<span class="token keyword">type</span> <span class="token class-name">Test1</span> <span class="token operator">=</span> Trim<span class="token operator">&lt;</span><span class="token string">&quot; 123 &quot;</span><span class="token operator">&gt;</span> <span class="token comment">// &quot;123&quot;</span>
<span class="token keyword">type</span> <span class="token class-name">Test2</span> <span class="token operator">=</span> Trim<span class="token operator">&lt;</span><span class="token string">&quot;  123 123  &quot;</span><span class="token operator">&gt;</span> <span class="token comment">// &quot;123 123&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们根据<code>TrimRight</code>的逻辑可以延伸出<code>TrimLeft</code>，并把二者结合</p><h2 id="replace" tabindex="-1"><a class="header-anchor" href="#replace" aria-hidden="true">#</a> Replace</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Replace<span class="token operator">&lt;</span>
  Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  Search <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  Replacement <span class="token keyword">extends</span> <span class="token builtin">string</span>
<span class="token operator">&gt;</span></span> <span class="token operator">=</span> Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Search<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Replacement<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  <span class="token operator">:</span> Str<span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">ReplaceRes0</span> <span class="token operator">=</span> Replace<span class="token operator">&lt;</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;m&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;&quot;</span>
<span class="token keyword">type</span> <span class="token class-name">ReplaceRes1</span> <span class="token operator">=</span> Replace<span class="token operator">&lt;</span><span class="token string">&#39;www.linbudu.top&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;m&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;mww.linbudu.top&quot;</span>
<span class="token keyword">type</span> <span class="token class-name">ReplaceRes2</span> <span class="token operator">=</span> Replace<span class="token operator">&lt;</span><span class="token string">&#39;www.linbudu.top&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;www-linbudu.top&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以根据Include的逻辑做一些改动，需要把 要查找的字符串（Search）+ 其他部分（L和R）变成 替换的字符串（Replacement）+ 其他部分（L和R） 就可以了。但是只替换了第一个</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ReplaceAll<span class="token operator">&lt;</span>
  Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  Search <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  Replacement <span class="token keyword">extends</span> <span class="token builtin">string</span>
<span class="token operator">&gt;</span></span> <span class="token operator">=</span> Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Search<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  <span class="token operator">?</span> ReplaceAll<span class="token operator">&lt;</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Replacement<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> Search<span class="token punctuation">,</span> Replacement<span class="token operator">&gt;</span>
  <span class="token operator">:</span> Str<span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">ReplaceAllRes0</span> <span class="token operator">=</span> ReplaceAll<span class="token operator">&lt;</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;m&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;&quot;</span>
<span class="token keyword">type</span> <span class="token class-name">ReplaceAllRes1</span> <span class="token operator">=</span> ReplaceAll<span class="token operator">&lt;</span><span class="token string">&#39;www.linbudu.top&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;m&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;mmm.linbudu.top&quot;</span>
<span class="token keyword">type</span> <span class="token class-name">ReplaceAllRes2</span> <span class="token operator">=</span> ReplaceAll<span class="token operator">&lt;</span><span class="token string">&#39;www.linbudu.top&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;www-linbudu-top&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们只需要把第一次的替换结果<code><code>\${L}\${Replacement}\${R}</code></code>进行递归即可</p><h2 id="split" tabindex="-1"><a class="header-anchor" href="#split" aria-hidden="true">#</a> Split</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Split<span class="token operator">&lt;</span>
  Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  Delimiter <span class="token keyword">extends</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
<span class="token operator">&gt;</span></span> <span class="token operator">=</span> Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Delimiter<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token constant">L</span><span class="token punctuation">,</span> <span class="token operator">...</span>Split<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> Delimiter<span class="token operator">&gt;</span><span class="token punctuation">]</span>
  <span class="token operator">:</span> Str <span class="token keyword">extends</span> <span class="token string">&quot;&quot;</span>
  <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token operator">:</span> <span class="token punctuation">[</span>Str<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// [&quot;linbudu&quot;, &quot;599&quot;, &quot;fe&quot;]</span>
<span class="token keyword">type</span> <span class="token class-name">SplitRes1</span> <span class="token operator">=</span> Split<span class="token operator">&lt;</span><span class="token string">&quot;linbudu,599,fe&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;,&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token comment">// [&quot;linbudu&quot;, &quot;599&quot;, &quot;fe&quot;]</span>
<span class="token keyword">type</span> <span class="token class-name">SplitRes2</span> <span class="token operator">=</span> Split<span class="token operator">&lt;</span><span class="token string">&quot;linbudu 599 fe&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot; &quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token comment">// [&quot;l&quot;, &quot;i&quot;, &quot;n&quot;, &quot;b&quot;, &quot;u&quot;, &quot;d&quot;, &quot;u&quot;]</span>
<span class="token keyword">type</span> <span class="token class-name">SplitRes3</span> <span class="token operator">=</span> Split<span class="token operator">&lt;</span><span class="token string">&quot;linbudu&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>首先匹配<code><code>\${infer L}\${Delimiter}\${infer R}</code></code></li><li>如果匹配上，那么<code>L</code>的值就是第一个分隔符，例如：&quot;linbudu,599,fe&quot; =&gt; { L = &quot;linbudu&quot;, R = &quot;599,fe&quot; }，那么<code>L</code>将不需要递归执行</li><li>通过<code>[L, ...Split&lt;R, Delimiter&gt;]</code>将<code>R</code>递归执行</li><li>如果不匹配<code><code>\${infer L}\${Delimiter}\${infer R}</code></code>，则需要在做一次是否是空字符串的判断，为了兼容<code>SplitRes3</code>的情况</li></ul><h2 id="join" tabindex="-1"><a class="header-anchor" href="#join" aria-hidden="true">#</a> Join</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Join<span class="token operator">&lt;</span>
  List <span class="token keyword">extends</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  Delimiter <span class="token keyword">extends</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
<span class="token operator">&gt;</span></span> <span class="token operator">=</span> List <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">]</span>
  <span class="token operator">?</span> <span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token operator">?</span> List<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token comment">// @ts-ignore 这里R的类型识别成了unknown[]</span>
    <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>List<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Delimiter<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Join<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> Delimiter<span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">JoinRes1</span> <span class="token operator">=</span> Join<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token string">&quot;lin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bu&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;du&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;-&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;lin-bu-du&quot;</span>
<span class="token keyword">type</span> <span class="token class-name">JoinRes2</span> <span class="token operator">=</span> Join<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;-&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>先通过<code>List extends [string | number, ...infer R]</code>匹配，并取出除第一位的数组</li><li>接着判断这个数组<code>R</code>是否是空数组 <ul><li>如果是空数组则直接返回<code>List[0]</code>，例如：<code>[&quot;a&quot;] extends [string | number, ...infer R]</code>此时<code>R</code>是<code>[]</code></li><li>如果不是空数组则通过<code><code>\${List[0]}\${Delimiter}\${Join&lt;R, Delimiter&gt;}</code></code>递归<code>R</code>数组</li></ul></li><li>如果<code>List extends [string | number, ...infer R]</code>匹配不通过则返回&quot;&quot;（应该不会走到这里，毕竟泛型已经约束了数组类型）</li></ul><h2 id="camelcase" tabindex="-1"><a class="header-anchor" href="#camelcase" aria-hidden="true">#</a> CamelCase</h2><p>小驼峰</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">DelimiterCase2CamelCase<span class="token operator">&lt;</span>
  Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  Delimiter <span class="token keyword">extends</span> <span class="token builtin">string</span>
<span class="token operator">&gt;</span></span> <span class="token operator">=</span> Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Delimiter<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>DelimiterCase2CamelCase<span class="token operator">&lt;</span>Capitalize<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> Delimiter<span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  <span class="token operator">:</span> Str<span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">CamelCase<span class="token operator">&lt;</span>
  Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  Delimiter <span class="token keyword">extends</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;_&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">|</span> <span class="token string">&quot; &quot;</span>
<span class="token operator">&gt;</span></span> <span class="token operator">=</span> DelimiterCase2CamelCase<span class="token operator">&lt;</span>Lowercase<span class="token operator">&lt;</span>Str<span class="token operator">&gt;</span><span class="token punctuation">,</span> Delimiter<span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">test1</span> <span class="token operator">=</span> CamelCase<span class="token operator">&lt;</span><span class="token string">&quot;Foo-bar-baz&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;fooBarBaz&quot;</span>
<span class="token keyword">type</span> <span class="token class-name">test2</span> <span class="token operator">=</span> CamelCase<span class="token operator">&lt;</span><span class="token string">&quot;foo_bar_baz&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;fooBarBaz&quot;</span>
<span class="token keyword">type</span> <span class="token class-name">test3</span> <span class="token operator">=</span> CamelCase<span class="token operator">&lt;</span><span class="token string">&quot;foo bar baz&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;fooBarBaz&quot;</span>
<span class="token keyword">type</span> <span class="token class-name">test4</span> <span class="token operator">=</span> CamelCase<span class="token operator">&lt;</span><span class="token string">&quot;foo-bar_baz&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;fooBarBaz&quot; | &quot;fooBaz&quot; | &quot;foo-barBaz&quot; | &quot;foo-barBarBaz&quot;</span>
<span class="token keyword">type</span> <span class="token class-name">test5</span> <span class="token operator">=</span> CamelCase<span class="token operator">&lt;</span><span class="token string">&quot;FOO-bar-baz&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;fooBarBaz&quot;</span>
<span class="token keyword">type</span> <span class="token class-name">test6</span> <span class="token operator">=</span> CamelCase<span class="token operator">&lt;</span><span class="token string">&quot;FOO-BAr-Baz&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;fooBarBaz&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>我们先看<code>DelimiterCase2CamelCase</code>类型，我们传入了字符串<code>Str</code>以及分隔符<code>Delimiter</code><ul><li>通过<code>Str extends <code>\${infer L}\${Delimiter}\${infer R}</code></code>匹配并将分隔符左右部分提取出来，例如：&quot;foo_bar_baz&quot; =&gt; {L: &quot;foo&quot;, R: &quot;bar_baz&quot;}</li><li>通过<code><code>\${L}\${DelimiterCase2CamelCase&lt;Capitalize&lt;R&gt;, Delimiter&gt;}</code></code>拼接字符串，<code>L</code>部分不用动，<code>R</code>的部分需要将首字母大写（&quot;bar_baz&quot; =&gt; &quot;Bar_baz&quot;）并递归</li><li>如果<code>Str</code>不能通过<code>Str extends <code>\${infer L}\${Delimiter}\${infer R}</code></code>匹配，直接返回，例如：字符串&quot;foo_bar_baz&quot;递归到最后一项&quot;baz&quot;时</li><li>首先<code>DelimiterCase2CamelCase</code>类型能通过<code>test1</code>、<code>test2</code>、<code>test3</code>，但是<code>test5</code>、<code>test6</code>并不会生效，是因为我们并没有对首次<code>L</code>部分做任何处理</li></ul></li><li>既然没法确定传入的字符串首字母是否大写，那么我们就统一传入的字符串，向类型<code>DelimiterCase2CamelCase</code>外面包裹一层<code>CamelCase</code><ul><li>通过<code>Lowercase&lt;Str&gt;</code>我们直接将传入的字符串转成全部小写，然后在透传给<code>DelimiterCase2CamelCase</code>类型</li><li>这样就实现了<code>test5</code>、<code>test6</code></li></ul></li><li>由于<code>Delimiter</code>为联合类型，在<code>Str extends <code>\${infer L}\${Delimiter}\${infer R}</code></code>匹配中会使用条件分析系统，所以并不支持<code>test4</code></li></ul><p>当然我们还可以对对象类型的键做处理</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">DelimiterCase2CamelCase<span class="token operator">&lt;</span>
  Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  Delimiter <span class="token keyword">extends</span> <span class="token builtin">string</span>
<span class="token operator">&gt;</span></span> <span class="token operator">=</span> Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Delimiter<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>DelimiterCase2CamelCase<span class="token operator">&lt;</span>Capitalize<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> Delimiter<span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  <span class="token operator">:</span> Str<span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">CamelCase<span class="token operator">&lt;</span>
  Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  Delimiter <span class="token keyword">extends</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;_&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">|</span> <span class="token string">&quot; &quot;</span>
<span class="token operator">&gt;</span></span> <span class="token operator">=</span> DelimiterCase2CamelCase<span class="token operator">&lt;</span>Lowercase<span class="token operator">&lt;</span>Str<span class="token operator">&gt;</span><span class="token punctuation">,</span> Delimiter<span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">CamelCasedProperties<span class="token operator">&lt;</span>Obj <span class="token keyword">extends</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>Key <span class="token keyword">in</span> <span class="token keyword">keyof</span> Obj <span class="token keyword">as</span> CamelCase<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">&amp;</span> Key<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token operator">:</span> Obj<span class="token punctuation">[</span>Key<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// type test1 = {</span>
<span class="token comment">//   fooBar: string;</span>
<span class="token comment">//   fooBaz: {</span>
<span class="token comment">//       nested_foo: string;</span>
<span class="token comment">//   };</span>
<span class="token comment">// }</span>
<span class="token keyword">type</span> <span class="token class-name">test1</span> <span class="token operator">=</span> CamelCasedProperties<span class="token operator">&lt;</span><span class="token punctuation">{</span> foo_bar<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> foo_baz<span class="token operator">:</span> <span class="token punctuation">{</span> nested_foo<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只需要在外面包裹一层，将<code>Key</code>使用别名处理下即可</p>`,28),o=[p];function l(c,i){return s(),a("div",null,o)}const k=n(e,[["render",l],["__file","0.模板字符串工具.html.vue"]]);export{k as default};
