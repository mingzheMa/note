import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,d as t}from"./app.002a81c8.js";const p={},e=t(`<h1 id="实现解析url参数" tabindex="-1"><a class="header-anchor" href="#实现解析url参数" aria-hidden="true">#</a> 实现解析URL参数</h1><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 并集</span>
<span class="token keyword">type</span> <span class="token class-name">ObjConcurrence<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> ObjDifference<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span> ObjIntersection<span class="token operator">&lt;</span><span class="token constant">B</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span> ObjDifference<span class="token operator">&lt;</span><span class="token constant">B</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token comment">// 交集</span>
<span class="token keyword">type</span> <span class="token class-name">Intersection<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">?</span> <span class="token constant">A</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">ObjIntersection<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> Intersection<span class="token operator">&lt;</span><span class="token keyword">keyof</span> <span class="token constant">A</span><span class="token punctuation">,</span> <span class="token keyword">keyof</span> <span class="token constant">B</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>

<span class="token comment">// 差集</span>
<span class="token keyword">type</span> <span class="token class-name">Difference<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">A</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">ObjDifference<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> Difference<span class="token operator">&lt;</span><span class="token keyword">keyof</span> <span class="token constant">A</span><span class="token punctuation">,</span> <span class="token keyword">keyof</span> <span class="token constant">B</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">showType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>Key <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span>Key<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 拆分参数字符串</span>
<span class="token keyword">type</span> <span class="token class-name">splitParamStr<span class="token operator">&lt;</span>Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> Left<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> Right<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
    <span class="token operator">?</span> <span class="token punctuation">{</span>
          <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> Left<span class="token punctuation">]</span><span class="token operator">:</span> Right<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>

<span class="token comment">// 拆分参数个数</span>
<span class="token keyword">type</span> <span class="token class-name">splitParams<span class="token operator">&lt;</span>Str <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Str <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> Left<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> Right<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
    <span class="token operator">?</span> ObjConcurrence<span class="token operator">&lt;</span>splitParamStr<span class="token operator">&lt;</span>Left<span class="token operator">&gt;</span><span class="token punctuation">,</span> splitParams<span class="token operator">&lt;</span>Right<span class="token operator">&gt;&gt;</span>
    <span class="token operator">:</span> splitParamStr<span class="token operator">&lt;</span>Str<span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token comment">// 简化类型显示</span>
<span class="token keyword">type</span> <span class="token class-name">getURLPathParams<span class="token operator">&lt;</span><span class="token constant">URL</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">URL</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> Left<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> Right<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">?</span> showType<span class="token operator">&lt;</span>splitParams<span class="token operator">&lt;</span>Right<span class="token operator">&gt;&gt;</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>

<span class="token comment">// 测试</span>
<span class="token keyword">type</span> <span class="token class-name">URLTest</span> <span class="token operator">=</span> getURLPathParams<span class="token operator">&lt;</span><span class="token string">&#39;https://www.baidu.com?a=1&amp;b=2&amp;c=3&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// type URLTest = {</span>
<span class="token comment">//     a: &quot;1&quot;;</span>
<span class="token comment">//     b: &quot;2&quot;;</span>
<span class="token comment">//     c: &quot;3&quot;;</span>
<span class="token comment">// }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),o=[e];function c(l,r){return s(),a("div",null,o)}const u=n(p,[["render",c],["__file","106.实现解析URL参数.html.vue"]]);export{u as default};
