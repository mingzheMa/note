import{_ as i}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as l,c as u,a as s,b as n,e as a,w as p,d as t,r as c}from"./app.002a81c8.js";const r={},k=s("h1",{id:"路由守卫",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#路由守卫","aria-hidden":"true"},"#"),n(" 路由守卫")],-1),d=s("code",null,"confirmTransition",-1),v={href:"https://v3.router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%AE%8C%E6%95%B4%E7%9A%84%E5%AF%BC%E8%88%AA%E8%A7%A3%E6%9E%90%E6%B5%81%E7%A8%8B",target:"_blank",rel:"noopener noreferrer"},m=s("code",null,"queue",-1),b=s("code",null,"queue",-1),f=s("h2",{id:"根据路由结构提取更新、失活。激活列表",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#根据路由结构提取更新、失活。激活列表","aria-hidden":"true"},"#"),n(" 根据路由结构提取更新、失活。激活列表")],-1),h=s("p",null,[n("根据当前路由实例和目标路由实例的"),s("code",null,"matched"),n('属性提取出更新（updated）、 失活（deactivated）、激活（activated）队列，因为一个子路由变化是会影响父路由的生命周期的，例如："/a/b" => "/c/d" 这样跳转会触发a、b路由的失活生命周期，c、d路由激活的生命周期')],-1),y=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token keyword">const</span> <span class="token punctuation">{</span> updated<span class="token punctuation">,</span> deactivated<span class="token punctuation">,</span> activated <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">resolveQueue</span><span class="token punctuation">(</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span>matched<span class="token punctuation">,</span>
      route<span class="token punctuation">.</span>matched
    <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们看下<code>resolveQueue</code>函数的具体实现</p>`,2),g=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">resolveQueue</span> <span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">current</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>RouteRecord<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">next</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>RouteRecord<span class="token operator">&gt;</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">updated</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>RouteRecord<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">activated</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>RouteRecord<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">deactivated</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>RouteRecord<span class="token operator">&gt;</span>
<span class="token punctuation">}</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> i
  <span class="token keyword">const</span> max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>length<span class="token punctuation">,</span> next<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">break</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">updated</span><span class="token operator">:</span> next<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">activated</span><span class="token operator">:</span> next<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">deactivated</span><span class="token operator">:</span> current<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实就是遍历新老路由的<code>matched</code>，找到有差异的路由位置，该位置之前的路由进入更新队列（updated），新路由该位置之后的路由进入激活队列（activated），旧路由该位置之后的路由进入失活队列（deactivated）</p><h2 id="执行生命周期队列" tabindex="-1"><a class="header-anchor" href="#执行生命周期队列" aria-hidden="true">#</a> 执行生命周期队列</h2><p>vueRouter会根据更新、失活。激活列表创建一个生命周期队列，我们介绍队列构建过程，先看下执行队列的逻辑，注意<code>queue</code>是路由生命周期函数队列，也就是说队列里的函数都是 (to, from, next) =&gt; {} 格式的</p>`,4),_=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token function">runQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> iterator<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// wait until async components are resolved before</span>
      <span class="token comment">// extracting in-component enter guards</span>
      <span class="token keyword">const</span> enterGuards <span class="token operator">=</span> <span class="token function">extractEnterGuards</span><span class="token punctuation">(</span>activated<span class="token punctuation">)</span>
      <span class="token keyword">const</span> queue <span class="token operator">=</span> enterGuards<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span>resolveHooks<span class="token punctuation">)</span>
      <span class="token function">runQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> iterator<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pending <span class="token operator">!==</span> route<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token function">abort</span><span class="token punctuation">(</span><span class="token function">createNavigationCancelledError</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> route<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>pending <span class="token operator">=</span> <span class="token keyword">null</span>
        <span class="token function">onComplete</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span>app<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span>app<span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">handleRouteEntered</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="runqueue" tabindex="-1"><a class="header-anchor" href="#runqueue" aria-hidden="true">#</a> runQueue</h4>`,2),E=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">runQueue</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">queue</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token operator">?</span>NavigationGuard<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token literal-property property">fn</span><span class="token operator">:</span> Function<span class="token punctuation">,</span> <span class="token literal-property property">cb</span><span class="token operator">:</span> Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token function-variable function">step</span> <span class="token operator">=</span> <span class="token parameter">index</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 队列执行完毕，触发回调</span>
      <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 交给迭代器函数</span>
        <span class="token function">fn</span><span class="token punctuation">(</span>queue<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">step</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果队列中没有这个值则直接下一个</span>
        <span class="token function">step</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">step</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>runQueue</code>函数接收三个参数，队列（queue）、处理函数（fn）、队列执行完毕回调（cb），里定义了一个递归函数<code>step</code>，不停递归将队列迭代完毕并触发回调，每迭代一项就交给特殊函数处理，我们看下传入的<code>iterator</code>函数</p>`,2),w=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token keyword">const</span> <span class="token function-variable function">iterator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">hook</span><span class="token operator">:</span> NavigationGuard<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pending <span class="token operator">!==</span> route<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">abort</span><span class="token punctuation">(</span><span class="token function">createNavigationCancelledError</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> route<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token function">hook</span><span class="token punctuation">(</span>route<span class="token punctuation">,</span> current<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">to</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>to <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果没有去向调用各路由类型的replace</span>
            <span class="token comment">// next(false) -&gt; abort navigation, ensure current URL</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ensureURL</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
            <span class="token function">abort</span><span class="token punctuation">(</span><span class="token function">createNavigationAbortedError</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> route<span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isError</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果传入一个错误直接报错 例如：next(throw &quot;123&quot;)</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ensureURL</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
            <span class="token function">abort</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>
            <span class="token keyword">typeof</span> to <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">||</span>
            <span class="token punctuation">(</span><span class="token keyword">typeof</span> to <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span>
              <span class="token punctuation">(</span><span class="token keyword">typeof</span> to<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> to<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 配置重定向</span>
            <span class="token comment">// next(&#39;/&#39;) or next({ path: &#39;/&#39; }) -&gt; redirect</span>
            <span class="token function">abort</span><span class="token punctuation">(</span><span class="token function">createNavigationRedirectedError</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> route<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> to <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> to<span class="token punctuation">.</span>replace<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// to无效则向后迭代</span>
            <span class="token comment">// confirm transition and pass on the value</span>
            <span class="token function">next</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">abort</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到这里执行了队列中生命周期函数，将目标路由（route）、来源路由（current）、跳转函数传入，我们回忆下路由守卫使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token function">beforeRouteEnter</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当触发<code>next</code>函数的时候，才会触发迭代器的next，也就是说<code>queue</code>队列中的路由守卫函数必须执行<code>next</code>，后续的路由守卫才能依次触发</p><p>当<code>queue</code>队列迭代完毕后触发回调函数，我们之后再说迭代完毕后的逻辑，先看下路由守卫队列是如何构建的</p><h2 id="路由守卫队列" tabindex="-1"><a class="header-anchor" href="#路由守卫队列" aria-hidden="true">#</a> 路由守卫队列</h2><p>我们知道路由守卫的执行顺序：</p><ol><li>触发组件路由离开守卫<code>beforeRouteLeave</code></li><li>触发全局路由进入前守卫<code>beforeEach</code></li><li>触发组件路由更新守卫<code>beforeRouteUpdate</code></li><li>触发路由配置中路由进入前守卫<code>beforeEnter</code></li><li>解析异步路由组件</li><li>触发激活组件进入前守卫<code>beforeRouteEnter</code></li><li>触发全局解析守卫<code>beforeResolve</code></li><li>修改当前路由</li><li>修改地址栏url</li><li>触发全局路由进入后守卫<code>afterHooks</code></li><li>异步触发第7步<code>beforeRouteEnter(to, from, next){}</code>守卫中<code>next</code>函数中的回调，并把创建好的组件实例当参数传入（<code>next(vm =&gt; {})</code>）</li></ol><p>接下来我们解析每一步的构建过程</p><h4 id="第1步-触发组件路由离开守卫beforerouteleave" tabindex="-1"><a class="header-anchor" href="#第1步-触发组件路由离开守卫beforerouteleave" aria-hidden="true">#</a> 第1步：触发组件路由离开守卫<code>beforeRouteLeave</code></h4><p>组件路由离开守卫是在<code>queue</code>队列里，这个队列中包含1-5步的守卫函数，最后通过<code>runQueue</code>函数依次触发<code>queue</code>队列</p>`,11),A=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token keyword">const</span> <span class="token literal-property property">queue</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token operator">?</span>NavigationGuard<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>
      <span class="token comment">// 组件路由离开守卫</span>
      <span class="token comment">// in-component leave guards</span>
      <span class="token function">extractLeaveGuards</span><span class="token punctuation">(</span>deactivated<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// 全局路由进入前守卫</span>
      <span class="token comment">// global before hooks</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span>beforeHooks<span class="token punctuation">,</span>
      <span class="token comment">// 组件路由更新守卫</span>
      <span class="token comment">// in-component update hooks</span>
      <span class="token function">extractUpdateHooks</span><span class="token punctuation">(</span>updated<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// 组件路由进入前守卫</span>
      <span class="token comment">// in-config enter guards</span>
      activated<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">m</span> <span class="token operator">=&gt;</span> m<span class="token punctuation">.</span>beforeEnter<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// 处理异步组件</span>
      <span class="token comment">// async components</span>
      <span class="token function">resolveAsyncComponents</span><span class="token punctuation">(</span>activated<span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到组件离开守卫通过<code>extractLeaveGuards</code>函数获得</p>`,2),x=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">extractLeaveGuards</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">deactivated</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>RouteRecord<span class="token operator">&gt;</span></span><span class="token punctuation">)</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token operator">?</span>Function<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">extractGuards</span><span class="token punctuation">(</span>deactivated<span class="token punctuation">,</span> <span class="token string">&#39;beforeRouteLeave&#39;</span><span class="token punctuation">,</span> bindGuard<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">extractGuards</span> <span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">records</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>RouteRecord<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
  <span class="token literal-property property">bind</span><span class="token operator">:</span> Function<span class="token punctuation">,</span>
  reverse<span class="token operator">?</span><span class="token operator">:</span> boolean</span>
<span class="token punctuation">)</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token operator">?</span>Function<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> guards <span class="token operator">=</span> <span class="token function">flatMapComponents</span><span class="token punctuation">(</span>records<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">def<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> match<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token function">flatten</span><span class="token punctuation">(</span>reverse <span class="token operator">?</span> guards<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> guards<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>extractLeaveGuards</code>函数是对<code>extractGuards</code>函数的二次封装，传如路由记录列表（records）、守卫名称（name）、绑定函数（bind）、是否反转队列（reverse，路由离开和进入执行顺序是不一样的，例如：组件路由离开守卫是先子组件然后父组件，组件路由更新/进入前守卫是先父组件在子组件），之后通过<code>flatMapComponents</code>函数获取守卫队列并返回</p>`,2),B=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">flatMapComponents</span> <span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">matched</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>RouteRecord<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">fn</span><span class="token operator">:</span> Function</span>
<span class="token punctuation">)</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token operator">?</span>Function<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 将每层路由的组件路由守卫拍平，例如：[[路由1组件1守卫1, 路由1组件1守卫2], 路由1组件2守卫1, 路由2组件1守卫1]</span>
  <span class="token comment">// 拍平前是以路由为维度，拍平后是组件为维度  </span>
  <span class="token keyword">return</span> <span class="token function">flatten</span><span class="token punctuation">(</span>matched<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">m</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>components<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span>
      m<span class="token punctuation">.</span>components<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span>
      m<span class="token punctuation">.</span>instances<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span>
      m<span class="token punctuation">,</span> key
    <span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 将数组拆除一层 [[1, 2, [3]], 4] =&gt; [1, 2, [3], 4]</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">flatten</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">arr</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span></span><span class="token punctuation">)</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里看到<code>flatMapComponents</code>将传入的路由层级（matched）遍历，然后将路由配置上的<code>components</code>属性（如果配置了component最后也会处理成{default: Component}）通过<code>fn</code>函数格式化返回（这个fn函数是提取每个组件中配置的路由守卫的），最后将队列拍平（队列每项是组件为维度的守卫函数）</p><p>这里通过<code>fn</code>函数获取组件中的守卫函数</p>`,3),j=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">extractGuards</span> <span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">records</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>RouteRecord<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
  <span class="token literal-property property">bind</span><span class="token operator">:</span> Function<span class="token punctuation">,</span>
  reverse<span class="token operator">?</span><span class="token operator">:</span> boolean</span>
<span class="token punctuation">)</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token operator">?</span>Function<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> guards <span class="token operator">=</span> <span class="token function">flatMapComponents</span><span class="token punctuation">(</span>records<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">def<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> match<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 从组件中获取生命周期配置</span>
    <span class="token keyword">const</span> guard <span class="token operator">=</span> <span class="token function">extractGuard</span><span class="token punctuation">(</span>def<span class="token punctuation">,</span> name<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>guard<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果声明周期配置的是数组则遍历调用bind，这里bind就是bindGuard函数</span>
      <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>guard<span class="token punctuation">)</span>
        <span class="token operator">?</span> guard<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">guard</span> <span class="token operator">=&gt;</span> <span class="token function">bind</span><span class="token punctuation">(</span>guard<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> match<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token operator">:</span> <span class="token function">bind</span><span class="token punctuation">(</span>guard<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> match<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token function">flatten</span><span class="token punctuation">(</span>reverse <span class="token operator">?</span> guards<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> guards<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">extractGuard</span> <span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">def</span><span class="token operator">:</span> Object <span class="token operator">|</span> Function<span class="token punctuation">,</span>
  <span class="token literal-property property">key</span><span class="token operator">:</span> string</span>
<span class="token punctuation">)</span><span class="token operator">:</span> NavigationGuard <span class="token operator">|</span> Array<span class="token operator">&lt;</span>NavigationGuard<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> def <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// extend now so that global mixins are applied.</span>
    def <span class="token operator">=</span> _Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>def<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> def<span class="token punctuation">.</span>options<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到从组件中获取守卫的配置（这里守卫是beforeRouteLeave，配置可以是函数队列），每个守卫函数通过<code>bind</code>高阶函数处理</p>`,2),R=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">bindGuard</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">guard</span><span class="token operator">:</span> NavigationGuard<span class="token punctuation">,</span> <span class="token literal-property property">instance</span><span class="token operator">:</span> <span class="token operator">?</span>_Vue</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token operator">?</span>NavigationGuard <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">boundRouteGuard</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">guard</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回函数中将守卫的this指向依赖（instance，在RouterView组件中会收集依赖，我们之后说）</p><p>这样第1步就结束了，通过<code>extractLeaveGuards</code>函数传入失活路由列表，最终返回一个以组件为维度的守卫函数队列（例如：[[路由1组件1守卫1, 路由1组件1守卫2], 路由1组件2守卫1, 路由2组件1守卫1]）</p><h4 id="第2步-触发全局路由进入前守卫beforeeach" tabindex="-1"><a class="header-anchor" href="#第2步-触发全局路由进入前守卫beforeeach" aria-hidden="true">#</a> 第2步：触发全局路由进入前守卫<code>beforeEach</code></h4><p>全局路由进入前守卫队列是在<code>queue</code>中，直接把当前路由实例上的属性插入队列（<code>this.router.beforeHooks</code>），这个<code>this.router</code>就是在创建<code>history</code>实例的时候传入的，实际上就是<code>VueRouter</code>实例，所以<code>this.router.beforeHooks</code>就是实例上<code>beforeHooks</code>属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">VueRouter</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">beforeHooks</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token operator">?</span>NavigationGuard<span class="token operator">&gt;</span>

  <span class="token comment">// ...</span>
  <span class="token function">beforeEach</span> <span class="token punctuation">(</span>fn<span class="token operator">:</span> Function<span class="token punctuation">)</span><span class="token operator">:</span> Function <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">registerHook</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beforeHooks<span class="token punctuation">,</span> fn<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">registerHook</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">list</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token literal-property property">fn</span><span class="token operator">:</span> Function</span><span class="token punctuation">)</span><span class="token operator">:</span> Function <span class="token punctuation">{</span>
  list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> i <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),C={href:"https://v3.router.vuejs.org/zh/api/#router-beforeeach",target:"_blank",rel:"noopener noreferrer"},F=s("h4",{id:"第3步-触发组件路由更新守卫beforerouteupdate",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#第3步-触发组件路由更新守卫beforerouteupdate","aria-hidden":"true"},"#"),n(" 第3步：触发组件路由更新守卫"),s("code",null,"beforeRouteUpdate")],-1),G={href:"/nav.2.vue-router3%E6%BA%90%E7%A0%81/4.%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC/3.%E8%B7%AF%E7%94%B1%E5%AE%88%E5%8D%AB.html#%E7%AC%AC1%E6%AD%A5-%E8%A7%A6%E5%8F%91%E7%BB%84%E4%BB%B6%E8%B7%AF%E7%94%B1%E7%A6%BB%E5%BC%80%E5%AE%88%E5%8D%ABbeforerouteleave",target:"_blank",rel:"noopener noreferrer"},q=s("code",null,"extractGuards",-1),D=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">extractUpdateHooks</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">updated</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>RouteRecord<span class="token operator">&gt;</span></span><span class="token punctuation">)</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token operator">?</span>Function<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">extractGuards</span><span class="token punctuation">(</span>updated<span class="token punctuation">,</span> <span class="token string">&#39;beforeRouteUpdate&#39;</span><span class="token punctuation">,</span> bindGuard<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="第4步-触发路由配置中路由进入前守卫beforeenter" tabindex="-1"><a class="header-anchor" href="#第4步-触发路由配置中路由进入前守卫beforeenter" aria-hidden="true">#</a> 第4步：触发路由配置中路由进入前守卫<code>beforeEnter</code></h4><p>直接从路由激活列表（activated）中获取<code>beforeEnter</code>配置</p><h4 id="第5步-解析异步路由组件" tabindex="-1"><a class="header-anchor" href="#第5步-解析异步路由组件" aria-hidden="true">#</a> 第5步：解析异步路由组件</h4><p>异步组件调用<code>resolveAsyncComponents</code>函数，并传入路由激活列表（activated）获得</p>`,5),H=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">resolveAsyncComponents</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">matched</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>RouteRecord<span class="token operator">&gt;</span></span><span class="token punctuation">)</span><span class="token operator">:</span> Function <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> hasAsync <span class="token operator">=</span> <span class="token boolean">false</span>

    <span class="token function">flatMapComponents</span><span class="token punctuation">(</span>matched<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">def<span class="token punctuation">,</span> _<span class="token punctuation">,</span> match<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// ...</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hasAsync<span class="token punctuation">)</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接返回一个路由守卫参数格式的函数，这里只用到了<code>next</code>参数，并开始通过<code>flatMapComponents</code>遍历每个路由层级下的组件，如果组件都不是异步组件则直接向后迭代</p><p>我们分析下组件的处理函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token function">flatMapComponents</span><span class="token punctuation">(</span>matched<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">def<span class="token punctuation">,</span> _<span class="token punctuation">,</span> match<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// if it&#39;s a function and doesn&#39;t have cid attached,</span>
      <span class="token comment">// assume it&#39;s an async component resolve function.</span>
      <span class="token comment">// we are not using Vue&#39;s default async resolving mechanism because</span>
      <span class="token comment">// we want to halt the navigation until the incoming component has been</span>
      <span class="token comment">// resolved.</span>
      <span class="token comment">// 判断是否为异步组件</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> def <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span> def<span class="token punctuation">.</span>cid <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        hasAsync <span class="token operator">=</span> <span class="token boolean">true</span>
        <span class="token comment">// 用来判断当前组件是否加载完毕</span>
        pending<span class="token operator">++</span>

        <span class="token comment">// 加载成功函数</span>
        <span class="token keyword">const</span> resolve <span class="token operator">=</span> <span class="token function">once</span><span class="token punctuation">(</span><span class="token parameter">resolvedDef</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isESModule</span><span class="token punctuation">(</span>resolvedDef<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            resolvedDef <span class="token operator">=</span> resolvedDef<span class="token punctuation">.</span>default
          <span class="token punctuation">}</span>
          <span class="token comment">// save resolved on async factory in case it&#39;s used elsewhere</span>
          def<span class="token punctuation">.</span>resolved <span class="token operator">=</span> <span class="token keyword">typeof</span> resolvedDef <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span>
            <span class="token operator">?</span> resolvedDef
            <span class="token operator">:</span> _Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>resolvedDef<span class="token punctuation">)</span>
          match<span class="token punctuation">.</span>components<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> resolvedDef
          pending<span class="token operator">--</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>pending <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>

        <span class="token comment">// 加载失败函数</span>
        <span class="token keyword">const</span> reject <span class="token operator">=</span> <span class="token function">once</span><span class="token punctuation">(</span><span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Failed to resolve async component </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>reason<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果调用加载失败函数传入了错误，则返回传入错误，否则使用默认错误</span>
            error <span class="token operator">=</span> <span class="token function">isError</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span>
              <span class="token operator">?</span> reason
              <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
            <span class="token comment">// 向后迭代</span>
            <span class="token function">next</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>

        <span class="token keyword">let</span> res
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
          <span class="token comment">// 触发异步组件</span>
          res <span class="token operator">=</span> <span class="token function">def</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 如果返回的是promise () =&gt; import(&quot;...&quot;)</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> res<span class="token punctuation">.</span>then <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 新语法提供的对象用法 () =&gt; {component:import(&quot;...&quot;), loading: ..., error: ...,}</span>
            <span class="token comment">// new syntax in Vue 2.3</span>
            <span class="token keyword">const</span> comp <span class="token operator">=</span> res<span class="token punctuation">.</span>component
            <span class="token keyword">if</span> <span class="token punctuation">(</span>comp <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> comp<span class="token punctuation">.</span>then <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              comp<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到这里首先定义了成功函数（resolve）、失败函数（reject），然后触发异步组件函数，如果成功函数触发则向后迭代，如果失败函数触发则也向后迭代不过传入了一个<code>error</code>实例，迭代过程会中断</p><h4 id="第6步-触发激活组件进入前守卫beforerouteenter" tabindex="-1"><a class="header-anchor" href="#第6步-触发激活组件进入前守卫beforerouteenter" aria-hidden="true">#</a> 第6步：触发激活组件进入前守卫<code>beforeRouteEnter</code></h4>`,6),V=s("code",null,"queue",-1),L={href:"/nav.2.vue-router3%E6%BA%90%E7%A0%81/4.%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC/3.%E8%B7%AF%E7%94%B1%E5%AE%88%E5%8D%AB.html#runqueue",target:"_blank",rel:"noopener noreferrer"},N=s("code",null,"queue",-1),Q=s("code",null,"queue",-1),T=s("code",null,"runQueue",-1),$=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token function">runQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> iterator<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// wait until async components are resolved before</span>
      <span class="token comment">// extracting in-component enter guards</span>
      <span class="token keyword">const</span> enterGuards <span class="token operator">=</span> <span class="token function">extractEnterGuards</span><span class="token punctuation">(</span>activated<span class="token punctuation">)</span>
      <span class="token keyword">const</span> queue <span class="token operator">=</span> enterGuards<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span>resolveHooks<span class="token punctuation">)</span>
      <span class="token function">runQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> iterator<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pending <span class="token operator">!==</span> route<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token function">abort</span><span class="token punctuation">(</span><span class="token function">createNavigationCancelledError</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> route<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>pending <span class="token operator">=</span> <span class="token keyword">null</span>
        <span class="token function">onComplete</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span>app<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span>app<span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">handleRouteEntered</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>激活组件进入前守卫队列通过<code>extractEnterGuards</code>函数构建，传入<code>activated</code>激活路由记录</p>`,2),U=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">extractEnterGuards</span> <span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">activated</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>RouteRecord<span class="token operator">&gt;</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token operator">?</span>Function<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">extractGuards</span><span class="token punctuation">(</span>
    activated<span class="token punctuation">,</span>
    <span class="token string">&#39;beforeRouteEnter&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token parameter">guard<span class="token punctuation">,</span> _<span class="token punctuation">,</span> match<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">bindEnterGuard</span><span class="token punctuation">(</span>guard<span class="token punctuation">,</span> match<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),M={href:"/nav.2.vue-router3%E6%BA%90%E7%A0%81/4.%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC/3.%E8%B7%AF%E7%94%B1%E5%AE%88%E5%8D%AB.html#%E7%AC%AC1%E6%AD%A5-%E8%A7%A6%E5%8F%91%E7%BB%84%E4%BB%B6%E8%B7%AF%E7%94%B1%E7%A6%BB%E5%BC%80%E5%AE%88%E5%8D%ABbeforerouteleave",target:"_blank",rel:"noopener noreferrer"},O=s("code",null,"extractGuards",-1),z=s("code",null,"activated",-1),I=s("code",null,"components",-1),P=s("code",null,"bindEnterGuard",-1),S=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">bindEnterGuard</span> <span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">guard</span><span class="token operator">:</span> NavigationGuard<span class="token punctuation">,</span>
  <span class="token literal-property property">match</span><span class="token operator">:</span> RouteRecord<span class="token punctuation">,</span>
  <span class="token literal-property property">key</span><span class="token operator">:</span> string</span>
<span class="token punctuation">)</span><span class="token operator">:</span> NavigationGuard <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">routeEnterGuard</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">guard</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> <span class="token parameter">cb</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> cb <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>match<span class="token punctuation">.</span>enteredCbs<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          match<span class="token punctuation">.</span>enteredCbs<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
        match<span class="token punctuation">.</span>enteredCbs<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token function">next</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里返回了一个<code>routeEnterGuard</code>的函数，后续插入到构建的新queue队列中，当这个函数执行的时候，会触发<code>bindEnterGuard</code>传入的<code>guard</code>函数，也就是构建新queue队列时在激活路由的组件列表中提取的路由守卫函数（当前步骤为组件中的beforeRouteEnter）</p>`,2),J={href:"https://v3.router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E7%BB%84%E4%BB%B6%E5%86%85%E7%9A%84%E5%AE%88%E5%8D%AB",target:"_blank",rel:"noopener noreferrer"},K=s("code",null,"beforeRouteEnter",-1),W=s("code",null,"enteredCbs",-1),X=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>          <span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span>app<span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">handleRouteEntered</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Y=s("code",null,"this.router.app.$nextTick",-1),Z={href:"/nav.1.vue2%E6%BA%90%E7%A0%81/4.%E5%93%8D%E5%BA%94%E5%BC%8F/$nexttick.html",target:"_blank",rel:"noopener noreferrer"},nn=s("code",null,"handleRouteEntered",-1),sn=s("code",null,"enteredCbs",-1),an=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">handleRouteEntered</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">route</span><span class="token operator">:</span> Route</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 遍历路由实例的路由层级</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> route<span class="token punctuation">.</span>matched<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> record <span class="token operator">=</span> route<span class="token punctuation">.</span>matched<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token comment">// 遍历每个路由层级上的依赖组件</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> name <span class="token keyword">in</span> record<span class="token punctuation">.</span>instances<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> instance <span class="token operator">=</span> record<span class="token punctuation">.</span>instances<span class="token punctuation">[</span>name<span class="token punctuation">]</span>
      <span class="token keyword">const</span> cbs <span class="token operator">=</span> record<span class="token punctuation">.</span>enteredCbs<span class="token punctuation">[</span>name<span class="token punctuation">]</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance <span class="token operator">||</span> <span class="token operator">!</span>cbs<span class="token punctuation">)</span> <span class="token keyword">continue</span>
      <span class="token keyword">delete</span> record<span class="token punctuation">.</span>enteredCbs<span class="token punctuation">[</span>name<span class="token punctuation">]</span>
      <span class="token comment">// 遍历依赖组件上的enteredCbs队列并执行</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cbs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">.</span>_isBeingDestroyed<span class="token punctuation">)</span> cbs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里可以看到通过<code>route</code>实例最终会执行<code>enteredCbs</code>队列</p><h4 id="第7步-触发全局解析守卫beforeresolve" tabindex="-1"><a class="header-anchor" href="#第7步-触发全局解析守卫beforeresolve" aria-hidden="true">#</a> 第7步：触发全局解析守卫<code>beforeResolve</code></h4><p>这里重新构建新的<code>queue</code>队列</p>`,4),tn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token function">runQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> iterator<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// ...</span>
      <span class="token keyword">const</span> queue <span class="token operator">=</span> enterGuards<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span>resolveHooks<span class="token punctuation">)</span>
      
      <span class="token function">runQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> iterator<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接取路由实例上的<code>resolveHooks</code>属性</p>`,2),en=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">VueRouter</span> <span class="token punctuation">{</span>
  <span class="token function">beforeResolve</span> <span class="token punctuation">(</span>fn<span class="token operator">:</span> Function<span class="token punctuation">)</span><span class="token operator">:</span> Function <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">registerHook</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resolveHooks<span class="token punctuation">,</span> fn<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">registerHook</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">list</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>any<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token literal-property property">fn</span><span class="token operator">:</span> Function</span><span class="token punctuation">)</span><span class="token operator">:</span> Function <span class="token punctuation">{</span>
  list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> i <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),pn=s("code",null,"resolveHooks",-1),on={href:"https://v3.router.vuejs.org/zh/api/#router-beforeresolve",target:"_blank",rel:"noopener noreferrer"},cn=s("code",null,"VueRouter.beforeResolve",-1),ln=s("h4",{id:"第8步-修改当前路由",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#第8步-修改当前路由","aria-hidden":"true"},"#"),n(" 第8步：修改当前路由")],-1),un=s("p",null,[n("通过6-7步知道新的"),s("code",null,"queue"),n("队列最终通过"),s("code",null,"runQueue"),n("函数执行后会触发回调函数（也就是函数的第三个参数）")],-1),rn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token function">confirmTransition</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">route</span><span class="token operator">:</span> Route<span class="token punctuation">,</span> <span class="token literal-property property">onComplete</span><span class="token operator">:</span> Function<span class="token punctuation">,</span> onAbort<span class="token operator">?</span><span class="token operator">:</span> Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token function">runQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> iterator<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// wait until async components are resolved before</span>
      <span class="token comment">// extracting in-component enter guards</span>
      <span class="token keyword">const</span> enterGuards <span class="token operator">=</span> <span class="token function">extractEnterGuards</span><span class="token punctuation">(</span>activated<span class="token punctuation">)</span>
      <span class="token keyword">const</span> queue <span class="token operator">=</span> enterGuards<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span>resolveHooks<span class="token punctuation">)</span>
      <span class="token function">runQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> iterator<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 路由变更报错</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pending <span class="token operator">!==</span> route<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token function">abort</span><span class="token punctuation">(</span><span class="token function">createNavigationCancelledError</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> route<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>pending <span class="token operator">=</span> <span class="token keyword">null</span>
        <span class="token comment">// 触发成功回调</span>
        <span class="token function">onComplete</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>
        <span class="token comment">// 触发enteredCbs队列</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span>app<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span>app<span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">handleRouteEntered</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),kn=s("code",null,"confirmTransition",-1),dn=s("code",null,"onComplete",-1),vn=s("code",null,"beforeRouteEnter",-1),mn=s("code",null,"enteredCbs",-1),bn={href:"/nav.2.vue-router3%E6%BA%90%E7%A0%81/4.%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC/3.%E8%B7%AF%E7%94%B1%E5%AE%88%E5%8D%AB.html#%E7%AC%AC6%E6%AD%A5-%E8%A7%A6%E5%8F%91%E6%BF%80%E6%B4%BB%E7%BB%84%E4%BB%B6%E8%BF%9B%E5%85%A5%E5%89%8D%E5%AE%88%E5%8D%ABbeforerouteenter",target:"_blank",rel:"noopener noreferrer"},fn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token function">transitionTo</span> <span class="token punctuation">(</span>
    <span class="token parameter"><span class="token literal-property property">location</span><span class="token operator">:</span> RawLocation<span class="token punctuation">,</span>
    onComplete<span class="token operator">?</span><span class="token operator">:</span> Function<span class="token punctuation">,</span>
    onAbort<span class="token operator">?</span><span class="token operator">:</span> Function</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">confirmTransition</span><span class="token punctuation">(</span>
      route<span class="token punctuation">,</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateRoute</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>
        onComplete <span class="token operator">&amp;&amp;</span> <span class="token function">onComplete</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ensureURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span>afterHooks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">hook</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          hook <span class="token operator">&amp;&amp;</span> <span class="token function">hook</span><span class="token punctuation">(</span>route<span class="token punctuation">,</span> prev<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>

        <span class="token comment">// fire ready cbs once</span>
        <span class="token comment">// 调用readyCbs队列，通过VueRouter.onReady添加的</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>ready<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>ready <span class="token operator">=</span> <span class="token boolean">true</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>readyCbs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">cb</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">cb</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们回到<code>transitionTo</code>函数，确认路由过渡函数<code>confirmTransition</code>的成功回调（第二个参数）中是调用<code>this.updateRoute(route)</code>更新路由的</p>`,2),hn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token function">updateRoute</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">route</span><span class="token operator">:</span> Route</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">=</span> route
    <span class="token keyword">this</span><span class="token punctuation">.</span>cb <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cb</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),yn=s("code",null,"this.current",-1),gn=s("code",null,"this.cb",-1),_n=s("code",null,"VueRouter.init()",-1),En={href:"/nav.2.vue-router3%E6%BA%90%E7%A0%81/2.VueRouter%E6%9E%84%E9%80%A0%E5%99%A8.html#init",target:"_blank",rel:"noopener noreferrer"},wn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    history<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token parameter">route</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>apps<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">app</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        app<span class="token punctuation">.</span>_route <span class="token operator">=</span> route
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),An=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token function">listen</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">cb</span><span class="token operator">:</span> Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>cb <span class="token operator">=</span> cb
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>目的是将所有初始化路由的vue实例（一般只有一个vue根实例）的<code>_route</code>属性都更新成当前路由实例</p>`,2),xn={href:"/nav.2.vue-router3%E6%BA%90%E7%A0%81/1.install.html",target:"_blank",rel:"noopener noreferrer"},Bn=s("code",null,"$router",-1),jn=s("code",null,"$router",-1),Rn=s("code",null,"$router",-1),Cn=s("code",null,"$router",-1),Fn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">&#39;$router&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function">get</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_routerRoot<span class="token punctuation">.</span>_router <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">&#39;$route&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function">get</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_routerRoot<span class="token punctuation">.</span>_route <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Gn=s("code",null,"_routerRoot",-1),qn={href:"/nav.2.vue-router3%E6%BA%90%E7%A0%81/1.install.html",target:"_blank",rel:"noopener noreferrer"},Dn=s("code",null,"this.$router",-1),Hn=s("code",null,"this.$route",-1),Vn=s("code",null,"VueRouter",-1),Ln=s("code",null,"Route",-1),Nn=s("h4",{id:"第9步-修改地址栏url",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#第9步-修改地址栏url","aria-hidden":"true"},"#"),n(" 第9步：修改地址栏url")],-1),Qn={href:"/nav.2.vue-router3%E6%BA%90%E7%A0%81/4.%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC/3.%E8%B7%AF%E7%94%B1%E5%AE%88%E5%8D%AB.html#%E7%AC%AC8%E6%AD%A5-%E4%BF%AE%E6%94%B9%E5%BD%93%E5%89%8D%E8%B7%AF%E7%94%B1",target:"_blank",rel:"noopener noreferrer"},Tn=s("code",null,"this.updateRoute(route)",-1),$n=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token function">transitionTo</span> <span class="token punctuation">(</span>
    <span class="token parameter"><span class="token literal-property property">location</span><span class="token operator">:</span> RawLocation<span class="token punctuation">,</span>
    onComplete<span class="token operator">?</span><span class="token operator">:</span> Function<span class="token punctuation">,</span>
    onAbort<span class="token operator">?</span><span class="token operator">:</span> Function</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">confirmTransition</span><span class="token punctuation">(</span>
      route<span class="token punctuation">,</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateRoute</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>
        onComplete <span class="token operator">&amp;&amp;</span> <span class="token function">onComplete</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ensureURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span>afterHooks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">hook</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          hook <span class="token operator">&amp;&amp;</span> <span class="token function">hook</span><span class="token punctuation">(</span>route<span class="token punctuation">,</span> prev<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>

        <span class="token comment">// fire ready cbs once</span>
        <span class="token comment">// 调用readyCbs队列，通过VueRouter.onReady添加的</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>ready<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>ready <span class="token operator">=</span> <span class="token boolean">true</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>readyCbs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">cb</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">cb</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后通过<code>this.ensureURL()</code>更新地址栏url</p><p>我们当前在<code>History</code>一个基础类上，而更新地址栏url会根据路由类型选择不同的方法，所以<code>ensureURL</code>方法是在<code>HashHistory</code>和<code>HTML5History</code>的子类上都有定义，具体更新方式我们之后说</p><h4 id="第10步-触发全局路由进入后守卫afterhooks" tabindex="-1"><a class="header-anchor" href="#第10步-触发全局路由进入后守卫afterhooks" aria-hidden="true">#</a> 第10步：触发全局路由进入后守卫<code>afterHooks</code></h4>`,4),Un={href:"/nav.2.vue-router3%E6%BA%90%E7%A0%81/4.%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC/3.%E8%B7%AF%E7%94%B1%E5%AE%88%E5%8D%AB.html#%E7%AC%AC9%E6%AD%A5-%E4%BF%AE%E6%94%B9%E5%9C%B0%E5%9D%80%E6%A0%8Furl",target:"_blank",rel:"noopener noreferrer"},Mn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token function">transitionTo</span> <span class="token punctuation">(</span>
    <span class="token parameter"><span class="token literal-property property">location</span><span class="token operator">:</span> RawLocation<span class="token punctuation">,</span>
    onComplete<span class="token operator">?</span><span class="token operator">:</span> Function<span class="token punctuation">,</span>
    onAbort<span class="token operator">?</span><span class="token operator">:</span> Function</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">confirmTransition</span><span class="token punctuation">(</span>
      route<span class="token punctuation">,</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span>afterHooks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">hook</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          hook <span class="token operator">&amp;&amp;</span> <span class="token function">hook</span><span class="token punctuation">(</span>route<span class="token punctuation">,</span> prev<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>

        <span class="token comment">// fire ready cbs once</span>
        <span class="token comment">// 调用readyCbs队列，通过VueRouter.onReady添加的</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>ready<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>ready <span class="token operator">=</span> <span class="token boolean">true</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>readyCbs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">cb</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">cb</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),On=s("code",null,"this.router.afterHooks",-1),zn=s("code",null,"afterHooks",-1),In={href:"/nav.2.vue-router3%E6%BA%90%E7%A0%81/4.%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC/3.%E8%B7%AF%E7%94%B1%E5%AE%88%E5%8D%AB.html#%E7%AC%AC2%E6%AD%A5-%E8%A7%A6%E5%8F%91%E5%85%A8%E5%B1%80%E8%B7%AF%E7%94%B1%E8%BF%9B%E5%85%A5%E5%89%8D%E5%AE%88%E5%8D%ABbeforeeach",target:"_blank",rel:"noopener noreferrer"},Pn=s("code",null,"VurRouter.afterEach",-1),Sn=s("h4",{id:"第11步-异步触发第7步beforerouteenter-to-from-next-守卫中next函数中的回调",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#第11步-异步触发第7步beforerouteenter-to-from-next-守卫中next函数中的回调","aria-hidden":"true"},"#"),n(" 第11步：异步触发第7步"),s("code",null,"beforeRouteEnter(to, from, next){}"),n("守卫中"),s("code",null,"next"),n("函数中的回调")],-1),Jn=s("p",null,[n("我们8-10步都是在触发"),s("code",null,"onComplete(route)"),n("成功回调的逻辑，我们现在回到"),s("code",null,"runQueue"),n("的回调这里接着往下走")],-1),Kn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token function">runQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> iterator<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// wait until async components are resolved before</span>
      <span class="token comment">// extracting in-component enter guards</span>
      <span class="token keyword">const</span> enterGuards <span class="token operator">=</span> <span class="token function">extractEnterGuards</span><span class="token punctuation">(</span>activated<span class="token punctuation">)</span>
      <span class="token keyword">const</span> queue <span class="token operator">=</span> enterGuards<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span>resolveHooks<span class="token punctuation">)</span>
      <span class="token function">runQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> iterator<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pending <span class="token operator">!==</span> route<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token function">abort</span><span class="token punctuation">(</span><span class="token function">createNavigationCancelledError</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> route<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>pending <span class="token operator">=</span> <span class="token keyword">null</span>
        <span class="token function">onComplete</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span>app<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span>app<span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">handleRouteEntered</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Wn=s("code",null,"$nextTick",-1),Xn=s("code",null,"handleRouteEntered(route)",-1),Yn=s("code",null,"beforeRouteEnter(to, from, next)",-1),Zn=s("code",null,"next",-1),ns={href:"/nav.2.vue-router3%E6%BA%90%E7%A0%81/4.%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC/3.%E8%B7%AF%E7%94%B1%E5%AE%88%E5%8D%AB.html#%E7%AC%AC6%E6%AD%A5-%E8%A7%A6%E5%8F%91%E6%BF%80%E6%B4%BB%E7%BB%84%E4%BB%B6%E8%BF%9B%E5%85%A5%E5%89%8D%E5%AE%88%E5%8D%ABbeforerouteenter",target:"_blank",rel:"noopener noreferrer"},ss=s("h2",{id:"总结",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#总结","aria-hidden":"true"},"#"),n(" 总结")],-1),as=s("p",null,"我们把所有的路由钩子都分析完了，路由跳转的过程中不止会触发一些钩子函数，还有url（第9步我们跳过的部分）和组件的更新，我们接下来针对这两个分析",-1);function ts(es,ps){const o=c("ExternalLinkIcon"),e=c("font");return l(),u("div",null,[k,s("p",null,[n("之后"),d,n("方法的逻辑都是在实现路由守卫，路由守卫有几种："),s("a",v,[n("全局、路由配置、组件"),a(o)]),n("级别的守卫，这些守卫是有优先级的，vueRouter先将这些路由守卫按照优先级放入一个队列"),m,n("（例如：[组件路由守卫离开, 全局路由守卫进入, 组件路由守卫更新, 组件路由守卫进入, 异步组件处理]），在依次迭代触发数组中的路由守卫，路由跳转后相关的路由守卫都是在这个"),b,n("队列执行完毕后的回调触发")]),f,h,a(e,{color:"#999"},{default:p(()=>[n("文件路径: vue-router/src/history/base.js")]),_:1}),y,a(e,{color:"#999"},{default:p(()=>[n("文件路径: vue-router/src/history/base.js")]),_:1}),g,a(e,{color:"#999"},{default:p(()=>[n("文件路径: vue-router/src/history/base.js")]),_:1}),_,a(e,{color:"#999"},{default:p(()=>[n("文件路径: vue-router/src/util/async.js")]),_:1}),E,a(e,{color:"#999"},{default:p(()=>[n("文件路径: vue-router/src/history/base.js")]),_:1}),w,a(e,{color:"#999"},{default:p(()=>[n("文件路径: vue-router/src/history/base.js")]),_:1}),A,a(e,{color:"#999"},{default:p(()=>[n("文件路径: vue-router/src/history/base.js")]),_:1}),x,a(e,{color:"#999"},{default:p(()=>[n("文件路径: vue-router/src/util/resolve-components.js")]),_:1}),B,a(e,{color:"#999"},{default:p(()=>[n("文件路径: vue-router/src/history/base.js")]),_:1}),j,a(e,{color:"#999"},{default:p(()=>[n("文件路径: vue-router/src/history/base.js")]),_:1}),R,s("p",null,[n("实际上就是调用"),s("a",C,[n("router.beforeEach"),a(o)]),n("添加进去的，返回一个删除函数，调用后将传入的守卫删除")]),F,s("p",null,[n("和"),s("a",G,[n("第1步"),a(o)]),n("过程类似，只是在调用"),q,n("函数传入的守卫名称不一样")]),D,a(e,{color:"#999"},{default:p(()=>[n("文件路径: vue-router/src/util/resolve-components.js")]),_:1}),H,s("p",null,[n("我们之前说过"),V,n("守卫队列是通过"),s("a",L,[n("runQueue函数"),a(o)]),n("执行，当"),N,n("守卫队列执行完毕后会触发回调函数，在回调函数中继续构建一个新的"),Q,n("队列，其中包含6-7步的守卫，之后依然通过"),T,n("函数执行队列")]),a(e,{color:"#999"},{default:p(()=>[n("文件路径: vue-router/src/history/base.js")]),_:1}),$,a(e,{color:"#999"},{default:p(()=>[n("文件路径: vue-router/src/history/base.js")]),_:1}),U,s("p",null,[s("a",M,[O,n("函数"),a(o)]),n("我们之前说过，这里函数将遍历传入的"),z,n("激活路由记录列表，在遍历每个路由记录的"),I,n("，接着调用传入的第三个参数绑定函数，这里可以看到绑定函数直接调用"),P,n("函数，将参数透传，结果返回")]),a(e,{color:"#999"},{default:p(()=>[n("文件路径: vue-router/src/history/base.js")]),_:1}),S,s("p",null,[s("a",J,[n("官方文档"),a(o)]),n("说明在"),K,n("中是不能访问当前组件实例的，因为当前组件还未创建，这里维护了一个回调列表"),W,n("，如果在调用next的时候传入了函数则记录下来（例如：beforeRouteEnter(to, from, next){ next(vm => ...) }），在之后调用的时候传入当前组件实例")]),a(e,{color:"#999"},{default:p(()=>[n("文件路径: vue-router/src/history/base.js")]),_:1}),X,s("p",null,[n("可以看到是通过"),Y,n("（这里app是Vue根实例）执行了一个异步函数（"),s("a",Z,[n("$nextTick逻辑不懂的话可以看这里"),a(o)]),n("），后执行"),nn,n("函数执行回调队列"),sn]),a(e,{color:"#999"},{default:p(()=>[n("文件路径: vue-router/src/util/route.js")]),_:1}),an,a(e,{color:"#999"},{default:p(()=>[n("文件路径: vue-router/src/history/base.js")]),_:1}),tn,a(e,{color:"#999"},{default:p(()=>[n("文件路径: vue-router/src/index.js")]),_:1}),en,s("p",null,[pn,n("属性是通过"),s("a",on,[cn,n("API"),a(o)]),n("添加的")]),ln,un,a(e,{color:"#999"},{default:p(()=>[n("文件路径: vue-router/src/history/base.js")]),_:1}),rn,s("p",null,[n("回调中会触发"),kn,n("函数的成功回调"),dn,n("，之后就是执行"),vn,n("守卫在收集的时候维护的"),mn,n("队列，我们在"),s("a",bn,[n("第6步"),a(o)]),n("说过")]),a(e,{color:"#999"},{default:p(()=>[n("文件路径: vue-router/src/history/base.js")]),_:1}),fn,a(e,{color:"#999"},{default:p(()=>[n("文件路径: vue-router/src/history/base.js")]),_:1}),hn,s("p",null,[n("修改当前路由"),yn,n("后触发"),gn,n("函数，这个函数是在"),_n,n("的时候赋值的，"),s("a",En,[n("这里忘了可以回顾下之前说的"),a(o)])]),a(e,{color:"#999"},{default:p(()=>[n("文件路径: vue-router/src/index.js")]),_:1}),wn,a(e,{color:"#999"},{default:p(()=>[n("文件路径: vue-router/src/history/base.js")]),_:1}),An,s("p",null,[n("我们之前在"),s("a",xn,[n("install阶段（文章末尾）"),a(o)]),n("说过，会向Vue构造函数的原型上增加"),Bn,n("、"),jn,n("属性，每个vue实例中获取"),Rn,n("、"),Cn,n("属性的时候都是获取的Vue构造函数原型上的属性")]),a(e,{color:"#999"},{default:p(()=>[n("文件路径: vue-router/src/install.js")]),_:1}),Fn,s("p",null,[Gn,n("是根vue实例，"),s("a",qn,[n("我们之前说过（文章末尾）"),a(o)]),n("，这样就能在每个组件实例中通过"),Dn,n("和"),Hn,n("获取"),Vn,n("实例和"),Ln,n("实例")]),Nn,s("p",null,[n("我们"),s("a",Qn,[n("第8步"),a(o)]),n("说到"),Tn,n("更新当前路由")]),a(e,{color:"#999"},{default:p(()=>[n("文件路径: vue-router/src/history/base.js")]),_:1}),$n,s("p",null,[n("我们接着"),s("a",Un,[n("第9步"),a(o)])]),a(e,{color:"#999"},{default:p(()=>[n("文件路径: vue-router/src/history/base.js")]),_:1}),Mn,s("p",null,[n("这里直接遍历"),On,n("列表执行，而"),zn,n("是和"),s("a",In,[n("beforeEach"),a(o)]),n("逻辑是一样的，都是通过"),Pn,n("添加的")]),Sn,Jn,a(e,{color:"#999"},{default:p(()=>[n("文件路径: vue-router/src/history/base.js")]),_:1}),Kn,s("p",null,[n("可以看到最后通过"),Wn,n("将"),Xn,n("放置异步队列等待执行，这个函数就是处理"),Yn,n("函数中的"),Zn,n("中传入函数的情况，我们之前在"),s("a",ns,[n("第6步"),a(o)]),n("的时候分析过")]),ss,as])}const is=i(r,[["render",ts],["__file","3.路由守卫.html.vue"]]);export{is as default};
