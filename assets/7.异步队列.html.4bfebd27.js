import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c,a as s,b as n,e as p,d as a,r as l}from"./app.002a81c8.js";const i={},u=a('<h1 id="异步队列" tabindex="-1"><a class="header-anchor" href="#异步队列" aria-hidden="true">#</a> 异步队列</h1><p>异步队列是 vue3 对触发副作用的优化，沿用 vue2.x。vue 是 mvvm 框架，通过数据驱动视图更新，如果我们在同一个组件一次修改多个数据，vue 只会渲染一次视图，这样不会多次无效渲染而浪费性能</p><h2 id="异步队列应用" tabindex="-1"><a class="header-anchor" href="#异步队列应用" aria-hidden="true">#</a> 异步队列应用</h2><p>异步队列在多个 api 中都有运用到例如组件渲染、监听器、$forceUpdate api，这些都和组件渲染有关</p><blockquote><p>计算属性同样会收集依赖从而派发更新，为什么不需要异步队列呢？计算属性是表达式计算的结果，因为表达式中响应式数据改变就会触发，所以计算属性应该和内部的数据时同步更新（先更新数据触发依赖，后计算属性更新依赖），也就是计算属性派发更新的时机是和内部数据派发更新的时机一致</p></blockquote><h3 id="组件副作用" tabindex="-1"><a class="header-anchor" href="#组件副作用" aria-hidden="true">#</a> 组件副作用</h3>',6),r={href:"/vue3%E6%BA%90%E7%A0%81/1.vnode%E5%88%B0dom.html#%E6%B8%B2%E6%9F%93vnode",target:"_blank",rel:"noopener noreferrer"},d=s("code",null,"setupRenderEffect",-1),k=a(`<blockquote><p>创建副作用实例可以传递第二个参数作为调度器，在派发更新时默认触发副作用函数，如果配置了调度器则改为触发调度器</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> setupRenderEffect<span class="token operator">:</span> <span class="token function-variable function">SetupRenderEffectFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
  instance<span class="token punctuation">,</span>
  initialVNode<span class="token punctuation">,</span>
  container<span class="token punctuation">,</span>
  anchor<span class="token punctuation">,</span>
  parentSuspense<span class="token punctuation">,</span>
  isSVG<span class="token punctuation">,</span>
  optimized
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>

  <span class="token keyword">const</span> effect <span class="token operator">=</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>effect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReactiveEffect</span><span class="token punctuation">(</span>
    componentUpdateFn<span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">queueJob</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span><span class="token punctuation">,</span>
    instance<span class="token punctuation">.</span>scope <span class="token comment">// track it in component&#39;s effect scope</span>
  <span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> update<span class="token operator">:</span> SchedulerJob <span class="token operator">=</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> effect<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>找到源码部分可以看到构建副作用实例 <code>ReactiveEffect</code> 传入的调度器实际上通过 <code>queueJob</code> 函数调用，也就是通过异步队列的形式渲染dom</p><h3 id="watch-相关-api" tabindex="-1"><a class="header-anchor" href="#watch-相关-api" aria-hidden="true">#</a> watch 相关 api</h3><p>watchEffect、watchPostEffect、watchSyncEffect 实际上都是 watch api 的语法糖，最终都是通过调用 <code>doWatch</code> 函数</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> queuePostRenderEffect <span class="token operator">=</span> __FEATURE_SUSPENSE__
  <span class="token operator">?</span> queueEffectWithSuspense
  <span class="token operator">:</span> queuePostFlushCb

<span class="token keyword">function</span> <span class="token function">doWatch</span><span class="token punctuation">(</span>
  source<span class="token operator">:</span> WatchSource <span class="token operator">|</span> WatchSource<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> WatchEffect <span class="token operator">|</span> object<span class="token punctuation">,</span>
  cb<span class="token operator">:</span> WatchCallback <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> immediate<span class="token punctuation">,</span> deep<span class="token punctuation">,</span> flush<span class="token punctuation">,</span> onTrack<span class="token punctuation">,</span> onTrigger <span class="token punctuation">}</span><span class="token operator">:</span> WatchOptions <span class="token operator">=</span> <span class="token constant">EMPTY_OBJ</span>
<span class="token punctuation">)</span><span class="token operator">:</span> WatchStopHandle <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>

  <span class="token comment">// 根据配置flush选择调度器的触发方式</span>
  <span class="token keyword">let</span> scheduler<span class="token operator">:</span> EffectScheduler
  <span class="token keyword">if</span> <span class="token punctuation">(</span>flush <span class="token operator">===</span> <span class="token string">&#39;sync&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 配置同步则直接出发job函数</span>
    scheduler <span class="token operator">=</span> job <span class="token keyword">as</span> <span class="token builtin">any</span> <span class="token comment">// the scheduler function gets called directly</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>flush <span class="token operator">===</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 配置渲染队列执行完毕后触发job函数</span>
    <span class="token function-variable function">scheduler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">queuePostRenderEffect</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> instance <span class="token operator">&amp;&amp;</span> instance<span class="token punctuation">.</span>suspense<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 配置讲job函数插入渲染队列触发</span>
    job<span class="token punctuation">.</span>pre <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">)</span> job<span class="token punctuation">.</span>id <span class="token operator">=</span> instance<span class="token punctuation">.</span>uid
    <span class="token function-variable function">scheduler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">queueJob</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 创建副作用实例</span>
  <span class="token keyword">const</span> effect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReactiveEffect</span><span class="token punctuation">(</span>getter<span class="token punctuation">,</span> scheduler<span class="token punctuation">)</span>

  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),v={href:"/vue3%E6%BA%90%E7%A0%81/6.%E7%9B%91%E5%90%AC%E5%99%A8.html#%E6%9E%84%E5%BB%BA-scheduler-%E8%B0%83%E5%BA%A6%E5%99%A8",target:"_blank",rel:"noopener noreferrer"},m=s("code",null,"flush",-1),b=s("code",null,"queuePostRenderEffect",-1),h=s("code",null,"queueJob",-1),f=s("code",null,"queuePostRenderEffect",-1),g=s("code",null,"queuePostFlushCb",-1),y=s("strong",null,"异步回调队列",-1),w=a(`<h2 id="异步队列构建" tabindex="-1"><a class="header-anchor" href="#异步队列构建" aria-hidden="true">#</a> 异步队列构建</h2><p>异步队列通过 <code>queueJob</code> 函数添加任务，它的源码在 runtime-core 库中</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> isFlushing <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">// 任务队列正在执行</span>
<span class="token keyword">let</span> isFlushPending <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">// 任务队列等待执行</span>

<span class="token keyword">const</span> queue<span class="token operator">:</span> SchedulerJob<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 任务队列</span>
<span class="token keyword">let</span> flushIndex <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 当前执行任务下标</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">queueJob</span><span class="token punctuation">(</span>job<span class="token operator">:</span> SchedulerJob<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>
    <span class="token operator">!</span>queue<span class="token punctuation">.</span>length <span class="token operator">||</span>
    <span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>
      job<span class="token punctuation">,</span>
      isFlushing <span class="token operator">&amp;&amp;</span> job<span class="token punctuation">.</span>allowRecurse <span class="token operator">?</span> flushIndex <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> flushIndex
    <span class="token punctuation">)</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果任务队列不为空则需要确定插入的任务不在任务队列中</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>job<span class="token punctuation">.</span>id <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果任务没有id则插入队尾</span>
      queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果任务有id则插入指定索引位置</span>
      queue<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token function">findInsertionIndex</span><span class="token punctuation">(</span>job<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> job<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 执行队列</span>
    <span class="token function">queueFlush</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">queueFlush</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 任务队列在执行中不能多次执行</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isFlushing <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isFlushPending<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    isFlushPending <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token comment">// 在异步中执行任务队列</span>
    currentFlushPromise <span class="token operator">=</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>flushJobs<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>queueJob</code> 函数用于将任务添加至任务队列 <code>queue</code>，<code>!queue.includes</code> 保证同一个任务不会多次加入任务队列，之后根据 <code>job.id</code> 来选择插入任务队列的位置</p><p>组件的挂载和更新逻辑都是先父后子，所以任务（副作用函数）的执行顺序也应该是先父后子，<code>job.id</code> 实际上就是组件实例id <code>instance.uid</code>，<code>instance.uid</code> 是组件唯一标识并且是自增的，因此在创建组件实例时越先挂载的组件的 uid 越小</p><p>之后通过 <code>queueFlush</code> 来执行队列，首先判断任务队列在执行中不能多次执行 <code>!isFlushing &amp;&amp; !isFlushPending</code>，之后通过 <code>Promise.resolve().then(flushJobs)</code> 来异步执行 <code>flushJobs</code> 函数，该函数用于执行任务队列</p><blockquote><p>在 vue2.x 中执行异步队列的方式会根据环境向下兼容，Promise &gt; MutationObserver &gt; setImmediate &gt; setTimeout，而 vue3 运行环境必须支持 ES6 所以不需要向下兼容，直接使用 Promise 即可</p></blockquote><p>在 watch api 派发更新逻辑中说到了 <code>queuePostFlushCb</code> 函数将任务加入异步回调队列等待执行</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> pendingPostFlushCbs<span class="token operator">:</span> SchedulerJob<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 回调队列</span>
<span class="token keyword">let</span> activePostFlushCbs<span class="token operator">:</span> SchedulerJob<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// 正在执行回调队列</span>
<span class="token keyword">let</span> postFlushIndex <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 当前执行回调下标</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">queuePostFlushCb</span><span class="token punctuation">(</span>cb<span class="token operator">:</span> SchedulerJobs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isArray</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// cb非数组</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
      <span class="token operator">!</span>activePostFlushCbs <span class="token operator">||</span>
      <span class="token operator">!</span>activePostFlushCbs<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>
        cb<span class="token punctuation">,</span>
        cb<span class="token punctuation">.</span>allowRecurse <span class="token operator">?</span> postFlushIndex <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> postFlushIndex
      <span class="token punctuation">)</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 回调函数去重</span>
      pendingPostFlushCbs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// if cb is an array, it is a component lifecycle hook which can only be</span>
    <span class="token comment">// triggered by a job, which is already deduped in the main queue, so</span>
    <span class="token comment">// we can skip duplicate check here to improve perf</span>
    pendingPostFlushCbs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>cb<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 执行队列</span>
  <span class="token function">queueFlush</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>queuePostFlushCb</code> 根据传入的回调类型将 <code>cb</code> 插入 <code>pendingPostFlushCbs</code> 异步回调队列</p><h2 id="异步队列执行" tabindex="-1"><a class="header-anchor" href="#异步队列执行" aria-hidden="true">#</a> 异步队列执行</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> comparator <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> SchedulerJob<span class="token punctuation">,</span> b<span class="token operator">:</span> SchedulerJob<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> diff <span class="token operator">=</span> <span class="token function">getId</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">getId</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>diff <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// diff为0表示当前任务（副作用函数）影响同一个组件，这里将任务带pre标记的提前触发</span>
    <span class="token comment">// watch api 的任务是有pre标记的</span>
    <span class="token comment">// 如果任务队列为: [组件副作用, 监听器] 需要改为 [监听器, 组件副作用]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>pre <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>b<span class="token punctuation">.</span>pre<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>pre <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>a<span class="token punctuation">.</span>pre<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> diff
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">flushJobs</span><span class="token punctuation">(</span>seen<span class="token operator">?</span><span class="token operator">:</span> CountMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  isFlushPending <span class="token operator">=</span> <span class="token boolean">false</span>
  isFlushing <span class="token operator">=</span> <span class="token boolean">true</span>

  queue<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>comparator<span class="token punctuation">)</span> <span class="token comment">// 将队列进行排序，保证队列始终是按照顺序执行</span>

  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// 执行任务队列</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>flushIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> flushIndex <span class="token operator">&lt;</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">;</span> flushIndex<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> job <span class="token operator">=</span> queue<span class="token punctuation">[</span>flushIndex<span class="token punctuation">]</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>job <span class="token operator">&amp;&amp;</span> job<span class="token punctuation">.</span>active <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 组件处于激活状态，组件卸载时job.active会赋值false，否则是undefined</span>
        <span class="token function">callWithErrorHandling</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">SCHEDULER</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    <span class="token comment">// 任务队列执行完毕将相关变量重置</span>
    flushIndex <span class="token operator">=</span> <span class="token number">0</span>
    queue<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token comment">// 执行pendingPostFlushCbs任务队列</span>
    <span class="token function">flushPostFlushCbs</span><span class="token punctuation">(</span>seen<span class="token punctuation">)</span>

    <span class="token comment">// 重置状态</span>
    isFlushing <span class="token operator">=</span> <span class="token boolean">false</span>
    currentFlushPromise <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token comment">// 回调队列执行中肯能会添加新的任务，递归flushJobs将任务执行完毕</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length <span class="token operator">||</span> pendingPostFlushCbs<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">flushJobs</span><span class="token punctuation">(</span>seen<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在执行任务队列前需要对任务队列进行排序，这么做主要有两个原因：</p><ul><li>父组件需要再子组件创建之前创建，父组件的 id 是小于子组件的</li><li>父组件副作用函数执行时如果将某个子组件删除，那么这个子组件是不需要触发副作用函数的，因此也需要先执行父组件的副作用</li></ul><p>通过 <code>comparator</code> 函数对任务队列进行排序，其中有 <code>pre</code> 标记的任务在同组件任务中会优先执行，watch api 的副作用函数就是带有 <code>pre</code> 标记的，因为监听器的监听函数触发可能会修改响应式对象导致组件更新，所以需要先出发监听器副作用函数</p><p>下一步遍历 <code>queue</code> 任务队列，如果组件被卸载跳过执行，否则执行任务（副作用函数）</p><p><code>queue</code> 任务队列执行完毕后调用 <code>flushPostFlushCbs</code> 函数来执行异步回调队列</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">flushPostFlushCbs</span><span class="token punctuation">(</span>seen<span class="token operator">?</span><span class="token operator">:</span> CountMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>pendingPostFlushCbs<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 将回调队列copy后清空</span>
    <span class="token keyword">const</span> deduped <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>pendingPostFlushCbs<span class="token punctuation">)</span><span class="token punctuation">]</span>
    pendingPostFlushCbs<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token comment">// #1947 already has active queue, nested flushPostFlushCbs call</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>activePostFlushCbs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      activePostFlushCbs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>deduped<span class="token punctuation">)</span>
      <span class="token keyword">return</span>
    <span class="token punctuation">}</span>

    activePostFlushCbs <span class="token operator">=</span> deduped

    activePostFlushCbs<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">getId</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">getId</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 执行回调前排序逻辑和任务队列一致</span>

    <span class="token comment">// 执行回调队列</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>
      postFlushIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      postFlushIndex <span class="token operator">&lt;</span> activePostFlushCbs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
      postFlushIndex<span class="token operator">++</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      activePostFlushCbs<span class="token punctuation">[</span>postFlushIndex<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 重置回调队列参数</span>
    activePostFlushCbs <span class="token operator">=</span> <span class="token keyword">null</span>
    postFlushIndex <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>flushPostFlushCbs</code> 内部首先拷贝回调队列，因为在某些回调函数中会修改回调队列，之后对回调队列进行排序，逻辑和任务队列一直，最后执行回调队列并重置回调队列相关参数</p><h2 id="循环更新检测" tabindex="-1"><a class="header-anchor" href="#循环更新检测" aria-hidden="true">#</a> 循环更新检测</h2><p>在开发环境中如果产生了循环更新的情况 vue 则会抛出错误</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> watch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span> 
<span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> 
<span class="token function">watch</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
  num<span class="token punctuation">.</span>value<span class="token operator">++</span> 
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span> 
num<span class="token punctuation">.</span>value<span class="token operator">++</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如上面例子会在打印101次 <code>val</code> 后报错 <code>Maximum recursive updates exceeded...</code>，这是 vue 内部防止循环更新的措施，防止浏览器卡死</p><p>修改 <code>num.value</code> 会触发依赖更新，这里是监听器的监听函数，依赖更新流程是将副作用函数加入异步队列并执行，执行异步队列的函数为 <code>flushJobs</code>，去掉无关代码只分析主要逻辑</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">flushJobs</span><span class="token punctuation">(</span>seen<span class="token operator">?</span><span class="token operator">:</span> CountMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    seen <span class="token operator">=</span> seen <span class="token operator">||</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> check <span class="token operator">=</span> __DEV__
    <span class="token operator">?</span> <span class="token punctuation">(</span>job<span class="token operator">:</span> SchedulerJob<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">checkRecursiveUpdates</span><span class="token punctuation">(</span>seen<span class="token operator">!</span><span class="token punctuation">,</span> job<span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token constant">NOOP</span>

  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// 执行任务队列</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>flushIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> flushIndex <span class="token operator">&lt;</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">;</span> flushIndex<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> job <span class="token operator">=</span> queue<span class="token punctuation">[</span>flushIndex<span class="token punctuation">]</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>job <span class="token operator">&amp;&amp;</span> job<span class="token punctuation">.</span>active <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__ <span class="token operator">&amp;&amp;</span> <span class="token function">check</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">continue</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// console.log(\`running:\`, job.id)</span>
        <span class="token function">callWithErrorHandling</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">SCHEDULER</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>flushJobs</code> 函数开始就初始化了 <code>seen</code>，该属性用于记录各个任务在当前任务队列的调用次数，之后再遍历任务队列 <code>queue</code> 时会先通过 <code>check</code> 进行分析，实际调用的是 <code>checkRecursiveUpdates</code> 函数，该函数就是用于检查任务执行情况</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">checkRecursiveUpdates</span><span class="token punctuation">(</span>seen<span class="token operator">:</span> CountMap<span class="token punctuation">,</span> fn<span class="token operator">:</span> SchedulerJob<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>seen<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果seen中不存在当前任务，初始化为1，这里表示任务首次执行</span>
    seen<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 任务非首次执行，获取任务执行次数判断是否大于100，如果大于则报错，反之则累加</span>
    <span class="token keyword">const</span> count <span class="token operator">=</span> seen<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token operator">!</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> instance <span class="token operator">=</span> fn<span class="token punctuation">.</span>ownerInstance
      <span class="token keyword">const</span> componentName <span class="token operator">=</span> instance <span class="token operator">&amp;&amp;</span> <span class="token function">getComponentName</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>type<span class="token punctuation">)</span>
      <span class="token function">warn</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Maximum recursive updates exceeded</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>
          componentName <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> in component &lt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>componentName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&gt;</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token template-punctuation string">\`</span></span>
        <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">. </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">This means you have a reactive effect that is mutating its own </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">dependencies and thus recursively triggering itself. Possible sources </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">include component template, render function, updated hook or </span><span class="token template-punctuation string">\`</span></span> <span class="token operator">+</span>
          <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">watcher source function.</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      seen<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>checkRecursiveUpdates</code> 函数判断任务是否首次执行，如果是首次执行则初始化任务执行次数，否则判断任务执行次数是否超过阈值，超过则报错，反之累加并记录次数</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>异步队列是为了减少多次修改数据产生的额外渲染，当第一个任务加入异步队列时就已经通过 <code>Promise.then</code> 异步执行队列，之后任务同步加入异步队列时会判断是否重复，这样保证同一个任务（副作用函数）不会多次执行，所以多次修改数据只会触发一次组件副作用函数。当异步队列执行完毕后就会执行异步回调队列，watch api 中配置 <code>flush</code> 为 <code>post</code> 时就会加入该队列</p><p>最终无论执行哪个队列都会进行循环更新检查（开发环境），在队列执行前初始化 <code>seen</code> 属性在每个任务执行前记录执行次数，如果超过阈值就抛出错误</p>`,31);function _(F,x){const e=l("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("在之前分析"),s("a",r,[n("组件挂载流程"),p(e)]),n("中会调用 "),d,n(" 函数来构建副作用函数以及副作用实例，并立即触发副作用函数进行依赖收集和渲染dom，其中触发副作用函数是通过副作用实例的调度器来完成")]),k,s("p",null,[n("我们之前分析过 watch api "),s("a",v,[n("构建调度器部分逻辑"),p(e)]),n("，可以看到当 watch api 的 "),m,n(" 配置不为 asyc 时会通过 "),b,n(" 或 "),h,n(" 函数加入异步队列等待触发，这里 "),f,n(" 函数也就是 "),g,n(" 将任务加入"),y,n("中，我们之后会详细说明")]),w])}const q=t(i,[["render",_],["__file","7.异步队列.html.vue"]]);export{q as default};
