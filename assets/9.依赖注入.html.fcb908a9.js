import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c,a as s,b as n,e as t,d as e,r as l}from"./app.002a81c8.js";const i="/note/assets/9.props.11201220.png",u="/note/assets/9.provideInject.3e0505e4.png",r={},d=e('<h1 id="依赖注入" tabindex="-1"><a class="header-anchor" href="#依赖注入" aria-hidden="true">#</a> 依赖注入</h1><p>依赖注入是 vue 提供的一套 api <code>provide</code>、<code>inject</code>，用于解决 <code>props</code> 属性需要透传的问题</p><p>使用 <code>props</code> 属性需要再每一个组件中进行透传，即使使用 <code>v-bind=&quot;$attr&quot;</code> 方便很多，但还是需要再每一层组件中都要写该逻辑</p><p><img src="'+i+'" alt=""></p><p>使用依赖注入则会省去很多代码，缺点就是数据注入的位置不清晰</p><p><img src="'+u+`" alt=""></p><p>依赖注入在代码中使用</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- 先辈组件 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span> provide <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
  <span class="token function">provide</span><span class="token punctuation">(</span><span class="token comment">/* 注入名 */</span> <span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token comment">/* 值 */</span> <span class="token string">&#39;hello!&#39;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 后代组件 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">{</span> inject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
  <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token comment">/* 注入名 */</span> <span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token comment">/* 默认值 */</span> <span class="token string">&#39;str&#39;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中注入名推荐使用 <code>Symbol</code> 这样比较好确定数据注入的来源</p><p>依赖注入还提供了全局注入的方式，这样可以在全局范围内的任意组件使用上述方法获取数据</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span><span class="token comment">/* 注入名 */</span> <span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token comment">/* 值 */</span> <span class="token string">&#39;hello!&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>如果不希望使用方修改数据，则可以在注入方使用 <code>readOnly</code> 包装</p></blockquote><h2 id="provide-api" tabindex="-1"><a class="header-anchor" href="#provide-api" aria-hidden="true">#</a> Provide api</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">provide</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>key<span class="token operator">:</span> InjectionKey<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// provide是将属性注入在组件实例上，如果没有currentInstance是不行的</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>currentInstance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">provide() can only be used inside setup().</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取当前组件实例的provides属性</span>
    <span class="token keyword">let</span> provides <span class="token operator">=</span> currentInstance<span class="token punctuation">.</span>provides 
    <span class="token comment">// 获取父组件实例的provides属性</span>
    <span class="token keyword">const</span> parentProvides <span class="token operator">=</span> currentInstance<span class="token punctuation">.</span>parent <span class="token operator">&amp;&amp;</span> currentInstance<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>provides 
    <span class="token comment">// 在组件实例创建时provides属性默认值就是父组件的provides，如果没有父组件则继承全局的provides配置</span>
    <span class="token comment">// 如果组件调用provide api的时候当前组件的provides和父组件的相等，则说明子组件没有自己的provides，也就是说子组件第一次调用provide api</span>
    <span class="token comment">// 这时候需要创建一个子组件的provides，并将其原型改为父组件的provides，利用原型链进行查找注册的值</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>parentProvides <span class="token operator">===</span> provides<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      provides <span class="token operator">=</span> currentInstance<span class="token punctuation">.</span>provides <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>parentProvides<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 将传入的键值对挂载至当前组件实例的provides属性上</span>
    provides<span class="token punctuation">[</span>key <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token operator">=</span> value
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),k=s("code",null,"currentInstance",-1),v=s("code",null,"provide",-1),m=s("code",null,"setup",-1),g=s("code",null,"setup",-1),b=s("code",null,"currentInstance",-1),y={href:"/vue3%E6%BA%90%E7%A0%81/3.setup.html#%E8%AE%BE%E7%BD%AE%E7%BB%84%E4%BB%B6%E5%AE%9E%E4%BE%8B",target:"_blank",rel:"noopener noreferrer"},f=s("code",null,"parentProvides === provides",-1),h=s("code",null,"provides",-1),_=s("code",null,"provides",-1),q=s("code",null,"provides",-1),w=s("code",null,"provides",-1),E=s("code",null,"provides",-1),x={href:"/vue3%E6%BA%90%E7%A0%81/3.setup.html#%E5%88%9B%E5%BB%BA%E7%BB%84%E4%BB%B6%E5%AE%9E%E4%BE%8B",target:"_blank",rel:"noopener noreferrer"},j=s("code",null,"provides",-1),B=e(`<p>那么就需要为当前组件实例创建一个属于自己的 <code>provides</code> 属性，依赖注入是后代组件可以访问先辈组件注入的数据，反之不行，这里将当前组件 <code>provides</code> 继承父组件的 <code>provides</code>，通过原型链的方式可以访问父组件注入的数据</p><p>总结一下，是这样的：</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>&lt;!-- 如果一个组件数不使用依赖注册那么组件中 Provide 的关系 --&gt;
app(appProvides) =&gt; 父组件(appProvides) =&gt; 子组件(appProvides)

&lt;!-- 如果在父组件中使用了 provide api --&gt;
app(appProvides) =&gt; 父组件(parentProvides = Object.create(appProvides)) =&gt; 子组件(parentProvides)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在父组件中使用了 provide api 会创建一个 parentProvides 对象将原型改为 appProvides，档子组件实例创建的时候则会复用父组件的 parentProvides，这样子组件可以访问父组件 parentProvides 上的属性，也可以通过原型链访问 appProvides 上的属性</p><h2 id="inject-api" tabindex="-1"><a class="header-anchor" href="#inject-api" aria-hidden="true">#</a> Inject api</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">inject</span><span class="token punctuation">(</span>
  key<span class="token operator">:</span> InjectionKey<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token comment">// 需要获取数据的key</span>
  defaultValue<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">,</span> <span class="token comment">// 默认值</span>
  treatDefaultAsFactory <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取当前组件实例</span>
  <span class="token keyword">const</span> instance <span class="token operator">=</span> currentInstance <span class="token operator">||</span> currentRenderingInstance
  <span class="token comment">// inject是获取组件实例上的provides属性，这里必须有组件实例</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// instance.parent == null表示在根组件使用inject api，需要获取全局的provides</span>
    <span class="token keyword">const</span> provides <span class="token operator">=</span>
      instance<span class="token punctuation">.</span>parent <span class="token operator">==</span> <span class="token keyword">null</span>
        <span class="token operator">?</span> instance<span class="token punctuation">.</span>vnode<span class="token punctuation">.</span>appContext <span class="token operator">&amp;&amp;</span> instance<span class="token punctuation">.</span>vnode<span class="token punctuation">.</span>appContext<span class="token punctuation">.</span>provides
        <span class="token operator">:</span> instance<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>provides

    <span class="token keyword">if</span> <span class="token punctuation">(</span>provides <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>key <span class="token keyword">as</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">symbol</span><span class="token punctuation">)</span> <span class="token keyword">in</span> provides<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果获取的值在provides中直接返回值</span>
      <span class="token keyword">return</span> provides<span class="token punctuation">[</span>key <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果获取的值不在provides中直接返回值，并且传入了默认参数，则返回默认参数</span>
      <span class="token keyword">return</span> treatDefaultAsFactory <span class="token operator">&amp;&amp;</span> <span class="token function">isFunction</span><span class="token punctuation">(</span>defaultValue<span class="token punctuation">)</span>
        <span class="token operator">?</span> <span class="token function">defaultValue</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>proxy<span class="token punctuation">)</span>
        <span class="token operator">:</span> defaultValue
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">injection &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">String</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; not found.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">inject() can only be used inside setup() or functional components.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>inject</code> 的逻辑就比较简单，获取父组件实例上的 <code>provides</code> 属性并获取访问的值。其中针对根组件中使用 <code>inject</code> 以及传入第二个参数 <code>defaultValue</code> 的边界情况做处理</p><h2 id="其他模块间数据共享的方式" tabindex="-1"><a class="header-anchor" href="#其他模块间数据共享的方式" aria-hidden="true">#</a> 其他模块间数据共享的方式</h2><p>vue3 composition api 可以将组件间的共用的数据提取出来，并依然保持响应式的特点</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// store.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span>

<span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span> num <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们创建一个 <code>store.ts</code> 放置公共数据</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- a.vue --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>store.num++<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>a.vue {{ store.num }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">&#39;./store&#39;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- b.vue --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>store.num--<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>b.vue {{ store.num }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">&#39;./store&#39;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后再 <code>a.vue</code>、<code>b.vue</code> 中分别对 <code>store.ts</code> 中导出的变量进行修改，变量 <code>num</code> 可以在两个组件之间显示、修改、触发组件更新</p><p>那么这种 <code>import/export</code> 的方式和 <code>provide/inject</code> 的方式有什么区别呢？</p><ul><li><strong>作用域不同</strong>，<code>import/export</code> 只要导入就可以覆盖所有模块。<code>provide/inject</code> 则只能覆盖后代组件</li><li><strong>数据流向不同</strong>，<code>import/export</code> 没有上下游的区别，任意模块都可以进行访问修改。<code>provide/inject</code> 的数据是从祖先组件流向后代组件，只有后代组件能访问祖先组件的数据。反之不行</li><li><strong>数据来源</strong>，<code>import/export</code> 需要清除数据从哪个文件导出。<code>provide/inject</code> 则只需要知道祖先组件的数据注入即可</li></ul><p><code>provide/inject</code> 由于不明确知道数据注入的位置，在代码重构上会造成额外的心智负担，如果将某个组件修改文件位置，那么需要搞清楚该组件中的依赖注入是否会出现问题</p><h2 id="依赖注入场景" tabindex="-1"><a class="header-anchor" href="#依赖注入场景" aria-hidden="true">#</a> 依赖注入场景</h2><p><code>provide/inject</code> 在组件开发中使用比较常见，例如 elementUI 中的选择器组件</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>value<span class="token punctuation">&quot;</span></span> <span class="token attr-name">multiple</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-option</span>
      <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item in options<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.value<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.label<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.value<span class="token punctuation">&quot;</span></span>
    <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-select</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;Option1&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;Option1&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;Option2&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;Option2&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如我们需要一个多选框，需要向 <code>ELSelect</code> 组件传入 <code>multiple</code> 属性，<code>ElOption</code> 组件也需要获取 <code>multiple</code> 属性来改变交互</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// ELSelect.vue</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> project<span class="token punctuation">,</span> defineProps <span class="token punctuation">}</span> from vue
<span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token generic-function"><span class="token function">defineProps</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">{</span> multiple<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">project</span><span class="token punctuation">(</span><span class="token string">&quot;multiple&quot;</span><span class="token punctuation">,</span> props<span class="token punctuation">.</span>multiple<span class="token punctuation">)</span>

<span class="token comment">// ElOption.vue</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> inject <span class="token punctuation">}</span> from vue
<span class="token keyword">const</span> multiple <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">&quot;multiple&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ElOption</code> 组件获取 <code>ELSelect</code> 组件注入的数据后就可以修改交互了</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// ElOption.vue</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> getCurrentInstance <span class="token punctuation">}</span> from vue
<span class="token keyword">const</span> multiple <span class="token operator">=</span> <span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>parent<span class="token punctuation">.</span>props<span class="token punctuation">.</span>multiple
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ElOption</code> 组件也可以直接通过获取父组件实例来访问 <code>multiple</code> 属性，但是需要保证 <code>ElOption</code> 的父组件必须是 <code>ELSelect</code>，当使用以下方式就不适用了</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>value<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-option-group</span>
      <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>group in options<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>group.label<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>group.label<span class="token punctuation">&quot;</span></span>
    <span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-option</span>
        <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item in group.options<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.value<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.label<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.value<span class="token punctuation">&quot;</span></span>
      <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-option-group</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-select</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p><code>provide</code> 用于数据注入，将数据共享给后代组件，本质是在组件挂载阶段将数据挂载到组件实例上，当子组件挂载时继承或赋值父组件的 provide。<code>inject</code> 用于获取组件实例上的 provide，这样就可以在子组件中访问父组件注入的数据了</p>`,27);function P(I,A){const a=l("ExternalLinkIcon");return o(),c("div",null,[d,s("p",null,[n("首先需要确定 "),k,n(" 有值，因为 "),v,n(" 是在 "),m,n(" 函数执行期间触发的，"),g,n(" 在触发前设置 "),b,n(" 为当前组件实例，"),s("a",y,[n("如果忘了这里有传送门"),t(a)])]),s("p",null,[n("之后判断 "),f,n(" 也就是当前组件实例的 "),h,n(" 是否和父组件实例的 "),_,n(" 为同一个。这里回顾下组件实例创建的时候 "),q,n(" 属性是赋值为 父组件的 "),w,n(" 属性，如果没有父组件则赋值为全局的 "),E,n(" 属性，"),s("a",x,[n("如果忘了这里有传送门"),t(a)]),n("。回到代码中，如果是同一个则可以认为当前组件没有属于自己的 "),j,n(" 属性")]),B])}const S=p(r,[["render",P],["__file","9.依赖注入.html.vue"]]);export{S as default};
