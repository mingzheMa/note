import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,d as t}from"./app.002a81c8.js";const e={},o=t(`<h1 id="es6和commonjs模块化" tabindex="-1"><a class="header-anchor" href="#es6和commonjs模块化" aria-hidden="true">#</a> ES6和CommonJS模块化</h1><h2 id="script标签" tabindex="-1"><a class="header-anchor" href="#script标签" aria-hidden="true">#</a> script标签</h2><p>首先浏览器在解析HTML的时候，加载到script标签时就会停下解析HTML，去运行script，等当前script内容执行完毕在继续解析HTML，如果是外部连接，则需要等待请求结束在加载script标签。如果script内容足够大那么页面就会明显卡死（渲染停止）</p><p>script标签中支持<code>defer</code>和<code>async</code>，则会在异步处理script中的逻辑，<code>defer</code>和<code>async</code>属性的异步逻辑是有却别的</p><ul><li>配置<code>defer</code>属性，会在时会当主队列（指编译HTML）执行完毕后在加载，如果有多个<code>defer</code>属性的script则根据加入异步队列顺序等到朱队列执行完毕后依次加载</li><li>配置<code>async</code>属性，会在异步执行完毕后加载（此时暂停HTML的解析），如果有多个<code>async</code>属性的script标签则哪个先执行完毕先加载哪个模块，所以无法保证加载顺序</li></ul><p>当然我们还知道script可以配置<code>type=&quot;module&quot;</code>属性，这就是ES6模块化，当解析到这个script标签时也会异步执行，相当于在标签上配置了<code>defer</code>属性，当然你也可以手动配置<code>async</code></p><h2 id="es6" tabindex="-1"><a class="header-anchor" href="#es6" aria-hidden="true">#</a> ES6</h2><p>es6是在模块编译阶段递归执行模块，导出结果只读，从下面例子可以看出</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// a.js</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a.js&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> foo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./b&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// b.js</span>
<span class="token keyword">export</span> <span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;b.js 先执行&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 执行结果:</span>
<span class="token comment">// b.js 先执行</span>
<span class="token comment">// a.js</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="commonjs循环引用" tabindex="-1"><a class="header-anchor" href="#commonjs循环引用" aria-hidden="true">#</a> CommonJS循环引用</h2><p>commonjs在代码执行时导入，并且导入结果是值的浅拷贝</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// a.js</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a starting&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;in a, b.done =&#39;</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>done<span class="token punctuation">)</span><span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a done&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// b.js</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;b starting&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;in b, a.done =&#39;</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>done<span class="token punctuation">)</span><span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;b done&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// node a.js</span>
<span class="token comment">// 执行结果：</span>
<span class="token comment">// a starting</span>
<span class="token comment">// b starting</span>
<span class="token comment">// in b, a.done = false</span>
<span class="token comment">// b done</span>
<span class="token comment">// in a, b.done = true</span>
<span class="token comment">// a done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>a.js</p><ul><li>执行a，a打印&quot;a starting&quot;</li><li>导出done赋值false b.js</li><li>执行b，b打印&quot;b starting&quot;</li><li>导出done赋值false</li><li>引入a，这时a已经执行完毕，直接读取导出结果done为false，并打印&quot;in b, a.done = false&quot;</li><li>导出done赋值true</li><li>b执行完毕，打印&quot;b done&quot; a.js</li><li>a继续向后执行，得到b导出的done（最后导出done为false），打印&quot;in a, b.done = true&quot;</li><li>导出done赋值true</li><li>a执行完毕，打印&quot;a done&quot;</li></ul><h2 id="es6循环导入" tabindex="-1"><a class="header-anchor" href="#es6循环导入" aria-hidden="true">#</a> ES6循环导入</h2><p>因为ES6是编译时递归执行模块，且导出一个只读值（可以动态修改导出的引用值中的元素，导出的值会同步修改）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// a.js</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a starting&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>foo<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./b&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;in b, foo:&#39;</span><span class="token punctuation">,</span> foo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a done&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// b.js</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;b starting&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>bar<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./a&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;in a, bar:&#39;</span><span class="token punctuation">,</span> bar<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;in a, setTimeout bar:&#39;</span><span class="token punctuation">,</span> bar<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;b done&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// babel-node a.js</span>
<span class="token comment">// 执行结果：</span>
<span class="token comment">// b starting</span>
<span class="token comment">// in a, bar: undefined</span>
<span class="token comment">// b done</span>
<span class="token comment">// a starting</span>
<span class="token comment">// in b, foo: foo</span>
<span class="token comment">// a done</span>
<span class="token comment">// in a, setTimeout bar: 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>代码执行之前先编译模块a，发现导入了模块b b.js</li><li>先执行模块b，打印&quot;b starting&quot;</li><li>编译模块b时发现导入了模块a，但此时模块a并未编译结束，所以什么也没有导出</li><li>因为模块a没有编译结束，所以输出&quot;in a, bar: undefined&quot;</li><li>接着将定时器丢入宏任务队列，打印&quot;b done&quot; a.js</li><li>模块b的导出结束，开始执行模块a，打印&quot;a starting&quot;</li><li></li></ul>`,18),p=[o];function c(i,l){return s(),a("div",null,p)}const r=n(e,[["render",c],["__file","ES6和CommonJS模块化.html.vue"]]);export{r as default};
