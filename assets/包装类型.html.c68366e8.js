import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,d as e}from"./app.002a81c8.js";const p={},t=e(`<h1 id="包装类型" tabindex="-1"><a class="header-anchor" href="#包装类型" aria-hidden="true">#</a> 包装类型</h1><p>我们知道js数据类型分为基本数据类型和复引用类型</p><p>这两个类型明显的却别就是引用类型有自己的内置方法（比如：[].push），也可以设置自定义属性（比如：({}).a = 1）</p><p>基本数据类型是不能设置自定义属性的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">123</span>
a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;number&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是有些基本类型的身上是有方法的（比如：(123).toFixed）</p><p>原来有三个基本类型ES提供了特殊的引用类型（包装类型）：Boolean、Number、String</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span>
<span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在使用以上方法创建基本类型时，内部会自动调用对应的构造函数返回一个包装对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span>
a<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码会经历三个步骤：</p><ol><li>创建Number包装对象</li><li>调用实例上toFixed方法</li><li>销毁实例</li></ol><p>不论获取基本类型值还是调用基本类型方法都会自动创建包装类型对象</p><p>我们来解释下这种现象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">123</span>
a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;number&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>当对变量a赋值的时候会自动创建包装类型对象</li><li>将变量name赋值在包装类型对象上，值为&quot;number&quot;</li><li>销毁包装类型对象</li><li>打印变量a上的name属性</li></ol><p>可以看到对基本类型添加属性其实是对临时创建的包装类型对象赋值，赋值结束后包装类型对象就会销毁，这时在进行打印属性就找不到了</p><p>如果我们就是要对基本类型添加并访问属性可以赋值在原型上</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">123</span>
<span class="token class-name">Number</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;number&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),o=[t];function l(c,i){return s(),a("div",null,o)}const d=n(p,[["render",l],["__file","包装类型.html.vue"]]);export{d as default};
