import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c as o,a as s,b as n,e as c,w as l,d as a,r as i}from"./app.9ac9284b.js";const r={},u=a(`<h1 id="react中的ts集成" tabindex="-1"><a class="header-anchor" href="#react中的ts集成" aria-hidden="true">#</a> React中的TS集成</h1><p>React中是使用JSX或者TSX文件来编写代码，JSX和TSX本质也是JS和TS，因此可以很好的兼容TypeScript的类型检查能力，在React使用TS需要关注三个方面：<strong>组件声明</strong>、<strong>泛型坑位</strong>、<strong>内置类型定义</strong>，对于React + TS的工程规范我们也会进行研究</p><ul><li>组件声明：我们在声明组件中如何使用TS进行属性约束、返回元素约束的类型检查，这里只研究函数组件相关</li><li>泛型坑位：是在React API中预留的一些泛型坑位，我们可以通过显示声明来约束数据操作</li><li>内置类型定义：主要是事件类型以及内置工具类型</li></ul><h2 id="项目初始化" tabindex="-1"><a class="header-anchor" href="#项目初始化" aria-hidden="true">#</a> 项目初始化</h2><p>我们用Vite快速搭建一个项目</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yarn create vite
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>项目目录</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>├── index.html
├── package.json
├── src
│   ├── App.css
│   ├── App.tsx
│   ├── favicon.svg
│   ├── index.css
│   ├── logo.svg
│   ├── main.tsx
│   └── vite-env.d.ts
├── tsconfig.json
├── tsconfig.node.json
└── vite.config.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="项目配置" tabindex="-1"><a class="header-anchor" href="#项目配置" aria-hidden="true">#</a> 项目配置</h2><p>我们在创建项目的时候就已经下载了一些依赖<code>@type/react</code>、<code>@type/react-dom</code>等，TS会默认加载<code>node_modules/@types</code>下的类型在全剧中使用</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">FC</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> <span class="token constant">FC</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>之后我们看下<code>vite-env.d.ts</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/// &lt;reference types=&quot;vite/client&quot; /&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个代码表示从<code>vite/client</code>的路径下引入类型，我们看下<code>node_modules/vite/client.d.ts</code>下的类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/// &lt;reference path=&quot;./types/importMeta.d.ts&quot; /&gt;</span>

<span class="token comment">// CSS modules</span>
<span class="token keyword">type</span> <span class="token class-name">CSSModuleClasses</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">readonly</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span>

<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;*.module.css&#39;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> classes<span class="token operator">:</span> CSSModuleClasses
  <span class="token keyword">export</span> <span class="token keyword">default</span> classes
<span class="token punctuation">}</span>

<span class="token comment">// ...</span>

<span class="token comment">// CSS</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;*.css&#39;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> css<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token keyword">export</span> <span class="token keyword">default</span> css
<span class="token punctuation">}</span>

<span class="token comment">// ...</span>

<span class="token comment">// Built-in asset types</span>
<span class="token comment">// see \`src/node/constants.ts\`</span>

<span class="token comment">// images</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;*.png&#39;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> src<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token keyword">export</span> <span class="token keyword">default</span> src
<span class="token punctuation">}</span>

<span class="token comment">// ...</span>

<span class="token comment">// media</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;*.mp4&#39;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> src<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token keyword">export</span> <span class="token keyword">default</span> src
<span class="token punctuation">}</span>

<span class="token comment">// ...</span>

<span class="token comment">// fonts</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;*.woff&#39;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> src<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token keyword">export</span> <span class="token keyword">default</span> src
<span class="token punctuation">}</span>

<span class="token comment">// ...</span>

<span class="token comment">// other</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;*.webmanifest&#39;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> src<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token keyword">export</span> <span class="token keyword">default</span> src
<span class="token punctuation">}</span>

<span class="token comment">// ...</span>

<span class="token comment">// wasm?init</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;*.wasm?init&#39;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token function-variable function">initWasm</span><span class="token operator">:</span> <span class="token punctuation">(</span>
    options<span class="token operator">:</span> WebAssembly<span class="token punctuation">.</span>Imports
  <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>WebAssembly<span class="token punctuation">.</span>Instance<span class="token operator">&gt;</span>
  <span class="token keyword">export</span> <span class="token keyword">default</span> initWasm
<span class="token punctuation">}</span>

<span class="token comment">// web worker</span>
<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;*?worker&#39;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> workerConstructor<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Worker
  <span class="token punctuation">}</span>
  <span class="token keyword">export</span> <span class="token keyword">default</span> workerConstructor
<span class="token punctuation">}</span>

<span class="token comment">// ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里是对非代码的文件进行定义，在导入时就会有类型保障</p><p>除了上面这两个地方还有<strong>tsconfig.json</strong>的配置，我们之后分析</p><h2 id="函数组件声明" tabindex="-1"><a class="header-anchor" href="#函数组件声明" aria-hidden="true">#</a> 函数组件声明</h2><p>函数组件本质就是一个函数，我们尝试对函数组件进行类型声明</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token function-variable function">say</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">unknown</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">Test1</span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token operator">:</span> Props<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span><span class="token operator">&gt;</span>Test1<span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> Test1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里会将<code>Test1</code>组件的类型推导成<code>(props: Props) =&gt; JSX.Element</code></p><blockquote><p>JSX类型是在全局声明的，位于<code>@types/react</code></p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  children<span class="token operator">:</span> React<span class="token punctuation">.</span>ReactNode<span class="token punctuation">;</span>
  <span class="token function-variable function">say</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">unknown</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> Test1<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>Props<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token operator">:</span> Props<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span><span class="token operator">&gt;</span>Test1<span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> Test1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>React提供了<code>FC</code>类型，是<code>FunctionComponent</code>类型的缩写，用来约束一个函数组件，我们看下实现</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">FC</span><span class="token operator">&lt;</span><span class="token constant">P</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> FunctionComponent<span class="token operator">&lt;</span><span class="token constant">P</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">FunctionComponent<span class="token operator">&lt;</span><span class="token constant">P</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span>props<span class="token operator">:</span> <span class="token constant">P</span><span class="token punctuation">,</span> context<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> ReactElement<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    propTypes<span class="token operator">?</span><span class="token operator">:</span> WeakValidationMap<span class="token operator">&lt;</span><span class="token constant">P</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    contextTypes<span class="token operator">?</span><span class="token operator">:</span> ValidationMap<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    defaultProps<span class="token operator">?</span><span class="token operator">:</span> Partial<span class="token operator">&lt;</span><span class="token constant">P</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    displayName<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>规定了函数的参数<code>props: P, context?: any</code>，以及返回值<code>ReactElement&lt;any, any&gt; | null</code></li><li>接着定义了函数组件的属性<code>propTypes</code>、<code>contextTypes</code>、<code>defaultProps</code>、<code>displayName</code></li></ul><p>函数组件插槽在<code>props: P</code>并没有children的声明，在写组件的时候需要自己添加声明，或者使用<code>PropsWithChildren</code>类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">PropsWithChildren<span class="token operator">&lt;</span><span class="token constant">P</span> <span class="token operator">=</span> <span class="token builtin">unknown</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">P</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span> children<span class="token operator">?</span><span class="token operator">:</span> ReactNode <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="函数组件泛型" tabindex="-1"><a class="header-anchor" href="#函数组件泛型" aria-hidden="true">#</a> 函数组件泛型</h2><p>FC类型是不能添加泛型的，如果想为组件添加泛型，就要放弃FC的类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">Props<span class="token operator">&lt;</span>Name<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> Name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> Test1 <span class="token operator">=</span> <span class="token operator">&lt;</span>Name <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span><span class="token operator">&gt;</span><span class="token punctuation">(</span>props<span class="token operator">:</span> Props<span class="token operator">&lt;</span>Name<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">Names</span> <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">Test2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>Test1<span class="token operator">&lt;</span>Names<span class="token operator">&gt;</span> name<span class="token operator">=</span><span class="token string">&quot;a&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Test1<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>Test1<span class="token operator">&lt;</span>Names<span class="token operator">&gt;</span> name<span class="token operator">=</span><span class="token string">&quot;b&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Test1<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>Test1<span class="token operator">&lt;</span>Names<span class="token operator">&gt;</span> name<span class="token operator">=</span><span class="token string">&quot;c&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Test1<span class="token operator">&gt;</span> <span class="token comment">// 报错：不能将类型“&quot;c&quot;”分配给类型“Names”。ts(2322)</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> Test2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在使用组件<code>Test1</code>的时候传入泛型，就可以对<code>name</code>属性进行约束</p><h2 id="泛型坑位" tabindex="-1"><a class="header-anchor" href="#泛型坑位" aria-hidden="true">#</a> 泛型坑位</h2><p>Hooks的泛型坑位比较多，我们逐一分析</p><h3 id="usestate" tabindex="-1"><a class="header-anchor" href="#usestate" aria-hidden="true">#</a> useState</h3><p>useState的类型可以进行隐式推导或者显示传入泛型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token punctuation">[</span>data1<span class="token punctuation">,</span> setdata1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// data1 类型为 string</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>data2<span class="token punctuation">,</span> setdata2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// data2 类型为 string | undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当你显式传入泛型但是没有初始值时的类型<code>string | undefined</code>，这在逻辑上非常合理，<code>useState</code>在声明类型的时候做了重载</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 默认值</span>
<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>initialState<span class="token operator">:</span> <span class="token constant">S</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">S</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">S</span><span class="token punctuation">,</span> Dispatch<span class="token operator">&lt;</span>SetStateAction<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 没有默认值</span>
<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">S</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> Dispatch<span class="token operator">&lt;</span>SetStateAction<span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果初始值需要为空对象</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">UserInfo</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token punctuation">[</span>data1<span class="token punctuation">,</span> setdata1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span>UserInfo<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">as</span> UserInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用断言的方式，但是这么做在后续使用的时候TS会认为<code>data1</code>是有属性的，如果你在访问深层数据那么就会出错</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">UserInfo</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token punctuation">[</span>data1<span class="token punctuation">,</span> setdata1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span>Partial<span class="token operator">&lt;</span>UserInfo<span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name?: string; age?: number }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以使用<code>Partial</code>类型将<code>UserInfo</code>中的类型改为可以可选</p><p>如果你想要得到<code>useState</code>返回值的类型，可以使用<code>returnType</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">res</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> useState<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="usecallback-与-usememo" tabindex="-1"><a class="header-anchor" href="#usecallback-与-usememo" aria-hidden="true">#</a> useCallback 与 useMemo</h3><p><code>useCallback</code>的泛型表示参数函数类型，<code>useMemo</code>的泛型表示参数函数返回结果</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 隐式推导</span>
<span class="token keyword">const</span> test1 <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span>age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> age <span class="token operator">&gt;=</span> <span class="token number">18</span> <span class="token operator">?</span> <span class="token string">&quot;成年&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;未成年&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (age: number) =&gt; &quot;成年&quot; | &quot;未成年&quot;</span>

<span class="token comment">// 显示声明</span>
<span class="token keyword">const</span> test2 <span class="token operator">=</span> useCallback<span class="token operator">&lt;</span><span class="token punctuation">(</span>age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;成年&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;未成年&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> age <span class="token operator">&gt;=</span> <span class="token number">18</span> <span class="token operator">?</span> <span class="token string">&quot;成年&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;未成年&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (age: number) =&gt; &quot;成年&quot; | &quot;未成年&quot;</span>

<span class="token comment">// 隐式推导</span>
<span class="token keyword">const</span> test3 <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;ma&quot;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: string; age: number}</span>

<span class="token comment">// 显示声明</span>
<span class="token keyword">const</span> test4 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useMemo</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;ma&quot;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: string; age: number}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般不会对<code>useCallback</code>传入泛型，因为在使用的时候函数参数已经确定。而<code>useMemo</code>的返回值多样，我们需要传入泛型对其返回值进行约束</p><h3 id="usereducer" tabindex="-1"><a class="header-anchor" href="#usereducer" aria-hidden="true">#</a> useReducer</h3><p>useReducer可以说是加强版的useState，useReducer的逻辑和redux类似，需要通过提交action来修改属性。useReducer有三个泛型坑位，reducer函数类型签名、初始数据类型、初始数据计算函数签名</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 如果需要传payload</span>
<span class="token keyword">type</span> <span class="token class-name">Action</span> <span class="token operator">=</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&quot;minus&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;plus&quot;</span> <span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token string">&quot;add&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;sub&quot;</span><span class="token punctuation">,</span>
  payload<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> defaultData <span class="token operator">=</span> <span class="token number">0</span>

<span class="token keyword">function</span> <span class="token function">nReduce</span><span class="token punctuation">(</span>state<span class="token operator">:</span> <span class="token keyword">typeof</span> defaultData<span class="token punctuation">,</span> action<span class="token operator">:</span> Action<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&quot;plus&quot;</span><span class="token operator">:</span>
      <span class="token keyword">return</span> state <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">case</span> <span class="token string">&quot;minus&quot;</span><span class="token operator">:</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> state <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> state<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>n<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>nReduce<span class="token punctuation">,</span> defaultData<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button
        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&quot;minus&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
        <span class="token operator">-</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>

      <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token punctuation">{</span>n<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>

      <span class="token operator">&lt;</span>button
        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&quot;plus&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
        <span class="token operator">+</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>Test <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里<code>useReducer</code>函数的泛型参数分别是<code>nReduce</code>函数类型、<code>defaultData</code>数据类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Reducer<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>prevState<span class="token operator">:</span> <span class="token constant">S</span><span class="token punctuation">,</span> action<span class="token operator">:</span> <span class="token constant">A</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">S</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">ReducerState<span class="token operator">&lt;</span><span class="token constant">R</span> <span class="token keyword">extends</span> Reducer<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;&gt;</span></span> <span class="token operator">=</span> <span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token class-name">Reducer<span class="token operator">&lt;</span><span class="token keyword">infer</span> <span class="token constant">S</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> <span class="token constant">S</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useReducer</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">R</span> <span class="token keyword">extends</span> Reducer<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span>
  reducer<span class="token operator">:</span> <span class="token constant">R</span><span class="token punctuation">,</span>
  initialState<span class="token operator">:</span> ReducerState<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span>ReducerState<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> Dispatch<span class="token operator">&lt;</span>ReducerAction<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>泛型<code>R</code>就是传入的reducer函数类型，<code>ReducerState&lt;R&gt;</code>中提取了reducer函数的第一个参数类型，也就是state的类型，在例子中就是<code>const defaultData = 0</code></p><blockquote><p>我们的reducer函数内部是会判断<code>action.type</code>的值返回不同结果，reducer中也应用了<strong>可辨识联合类型概念</strong>，通过对<code>action.type</code>的判断我们就可以在<code>case</code>语句中获得对应分支的类型</p></blockquote><h3 id="useref-与-useimperativehandle" tabindex="-1"><a class="header-anchor" href="#useref-与-useimperativehandle" aria-hidden="true">#</a> useRef 与 useImperativeHandle</h3><p>useRef的使用场景有两个，存储Dom对象或组件实例、持久化存储值，两种方式的对应类型也是不同的</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> test1 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useRef</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// React.MutableRefObject&lt;{ a: number }&gt;</span>
<span class="token keyword">const</span> test2 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useRef</span><span class="token generic class-name"><span class="token operator">&lt;</span>HTMLBodyElement<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  React.RefObject&lt;HTMLBodyElement&gt;</span>
<span class="token keyword">const</span> test3 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useRef</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// React.MutableRefObject&lt;number | undefined&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实类型本身并没有对传入的泛型有约束，只是判断了泛型和参数是否传入</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">MutableRefObject<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  current<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">RefObject<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token keyword">readonly</span> current<span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useRef</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>initialValue<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> MutableRefObject<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useRef</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>initialValue<span class="token operator">:</span> <span class="token constant">T</span><span class="token operator">|</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> RefObject<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">useRef</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> MutableRefObject<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>useRef函数使用了重载，优先判断泛型和参数都有值，在判断泛型和参数都有值且值可能是null，最后判断泛型没有值参数也可能没有值</p><blockquote><p>HTMLDivElement是TS内置类型，在使用类似类型时应该尽可能精确，比如：HTMLInputElement、HTMLIFrameElement，而不是HTMLElement比较宽泛的定义，因为这些类型内部分别封装了一些元素独有的类型定义</p></blockquote><p>useImperativeHandle实现在函数组件通过ref转发后可以通过该方法配置函数组件中ref参数的值，听着感觉很迷糊，我们写个例子</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">CompFnRefExtend</span> <span class="token keyword">extends</span> <span class="token class-name">CompFnRef</span><span class="token punctuation">{</span>
  c<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">CompFn</span><span class="token punctuation">(</span>props<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> ref<span class="token operator">:</span> React<span class="token punctuation">.</span>Ref<span class="token operator">&lt;</span>CompFnRef<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 自定义暴露给父组件的值，当依赖项变化时再次触发函数更新返回值</span>
  <span class="token generic-function"><span class="token function">useImperativeHandle</span><span class="token generic class-name"><span class="token operator">&lt;</span>CompFnRef<span class="token punctuation">,</span> CompFnRefExtend<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
    ref<span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        b<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
        c<span class="token operator">:</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">,</span>
        <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>CompFn<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> NewCompFn <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">forwardRef</span><span class="token generic class-name"><span class="token operator">&lt;</span>CompFnRef<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>CompFn<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">CompFnRef</span> <span class="token punctuation">{</span>
  a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
  <span class="token function-variable function">sayHello</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> ref <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useRef</span><span class="token generic class-name"><span class="token operator">&lt;</span>CompFnRef<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>NewCompFn ref<span class="token operator">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button
        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          ref<span class="token punctuation">.</span>current<span class="token operator">?.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ref<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
        diaoyong
      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>我们使用<code>useRef&lt;CompFnRef&gt;</code>期望的到一个<code>CompFnRef</code>类型的ref</li><li>使用<code>React.forwardRef&lt;CompFnRef, {}&gt;(CompFn)</code>进行ref转发，方法接收两个泛型，分别是ref的类型和props的类型</li><li><code>useImperativeHandle</code>中对ref进行赋值，接收两个泛型，传入的ref类型和函数返回值类型，其中函数返回值类型必须继承传入的ref类型。我们这里增加了一个<code>c</code>属性，返回值类型就会提供额外检查</li></ul><p>除了上述的hooks之外还有一些hooks结构比较简单或者是没有泛型坑位，想了解可以自行查看源码</p><h2 id="内置类型" tabindex="-1"><a class="header-anchor" href="#内置类型" aria-hidden="true">#</a> 内置类型</h2><p>除了react内置方法会提供一些泛型坑位以外，还会提供一些内置类型，比如我们在函数组件声明中说的<code>FC</code>类型，它们都在<code>@types/react</code>中定义，我们接下来介绍几个内置的类型</p><h3 id="事件类型" tabindex="-1"><a class="header-anchor" href="#事件类型" aria-hidden="true">#</a> 事件类型</h3><p>我们使用事件，事件的返回值中也有react定义的事件返回类型，比如<code>ChangeEvent</code>、<code>MouseEvent</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> ChangeEvent<span class="token punctuation">,</span> MouseEvent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">Container</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

  <span class="token keyword">function</span> <span class="token function">handleChange</span><span class="token punctuation">(</span>e<span class="token operator">:</span> ChangeEvent<span class="token operator">&lt;</span>HTMLInputElement<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span>e<span class="token operator">:</span> MouseEvent<span class="token operator">&lt;</span>HTMLButtonElement<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>input onChange<span class="token operator">=</span><span class="token punctuation">{</span>handleChange<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span><span class="token operator">&gt;</span>click<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ChangeEvent</code>、<code>MouseEvent</code>中还提供了泛型坑位，用于确定事件绑定的元素，我们可以传入确定的元素类型来获取更精确的类型检查</p><p>react也提供了对整个事件函数的类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> ChangeEventHandler <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> handleChange<span class="token operator">:</span> ChangeEventHandler<span class="token operator">&lt;</span>HTMLInputElement<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ChangeEventHandler</code>类型也提供了泛型坑位，可以传入事件绑定元素。此时函数参数<code>e</code>的类型就会被推导成<code>ChangeEven&lt;HTMLInputElement&gt;</code></p><p>所有事件在react中都有类型定义，只需要用的时候查找即可</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">//</span>
<span class="token comment">// Event Handler Types</span>
<span class="token comment">// ----------------------------------------------------------------------</span>

<span class="token keyword">type</span> <span class="token class-name">EventHandler<span class="token operator">&lt;</span><span class="token constant">E</span> <span class="token keyword">extends</span> SyntheticEvent<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token function">bivarianceHack</span><span class="token punctuation">(</span>event<span class="token operator">:</span> <span class="token constant">E</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token string">&quot;bivarianceHack&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">ReactEventHandler<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> Element<span class="token operator">&gt;</span></span> <span class="token operator">=</span> EventHandler<span class="token operator">&lt;</span>SyntheticEvent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">ClipboardEventHandler<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> Element<span class="token operator">&gt;</span></span> <span class="token operator">=</span> EventHandler<span class="token operator">&lt;</span>ClipboardEvent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">CompositionEventHandler<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> Element<span class="token operator">&gt;</span></span> <span class="token operator">=</span> EventHandler<span class="token operator">&lt;</span>CompositionEvent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">DragEventHandler<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> Element<span class="token operator">&gt;</span></span> <span class="token operator">=</span> EventHandler<span class="token operator">&lt;</span>DragEvent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">FocusEventHandler<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> Element<span class="token operator">&gt;</span></span> <span class="token operator">=</span> EventHandler<span class="token operator">&lt;</span>FocusEvent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">FormEventHandler<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> Element<span class="token operator">&gt;</span></span> <span class="token operator">=</span> EventHandler<span class="token operator">&lt;</span>FormEvent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">ChangeEventHandler<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> Element<span class="token operator">&gt;</span></span> <span class="token operator">=</span> EventHandler<span class="token operator">&lt;</span>ChangeEvent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">KeyboardEventHandler<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> Element<span class="token operator">&gt;</span></span> <span class="token operator">=</span> EventHandler<span class="token operator">&lt;</span>KeyboardEvent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">MouseEventHandler<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> Element<span class="token operator">&gt;</span></span> <span class="token operator">=</span> EventHandler<span class="token operator">&lt;</span>MouseEvent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">TouchEventHandler<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> Element<span class="token operator">&gt;</span></span> <span class="token operator">=</span> EventHandler<span class="token operator">&lt;</span>TouchEvent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">PointerEventHandler<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> Element<span class="token operator">&gt;</span></span> <span class="token operator">=</span> EventHandler<span class="token operator">&lt;</span>PointerEvent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">UIEventHandler<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> Element<span class="token operator">&gt;</span></span> <span class="token operator">=</span> EventHandler<span class="token operator">&lt;</span>UIEvent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">WheelEventHandler<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> Element<span class="token operator">&gt;</span></span> <span class="token operator">=</span> EventHandler<span class="token operator">&lt;</span>WheelEvent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">AnimationEventHandler<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> Element<span class="token operator">&gt;</span></span> <span class="token operator">=</span> EventHandler<span class="token operator">&lt;</span>AnimationEvent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">TransitionEventHandler<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> Element<span class="token operator">&gt;</span></span> <span class="token operator">=</span> EventHandler<span class="token operator">&lt;</span>TransitionEvent<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>onInput</code>事件存在兼容性问题，所以没有该事件类型定义，可以使用<code>KeyboardEventHandler</code>代替</p></blockquote><h3 id="cssproperties-css描述类型" tabindex="-1"><a class="header-anchor" href="#cssproperties-css描述类型" aria-hidden="true">#</a> CSSProperties（css描述类型）</h3><p>如果需要添加一个<code>style</code>行内样式该如何提供类型检查，react提供了<code>CSSProperties</code>用于描述css属性以及对应的值类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> CSSProperties <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> style<span class="token operator">:</span> CSSProperties <span class="token operator">=</span> <span class="token punctuation">{</span>
  display<span class="token operator">:</span> <span class="token string">&#39;flex&#39;</span><span class="token punctuation">,</span>
  alignContent<span class="token operator">:</span> <span class="token string">&#39;center&#39;</span><span class="token punctuation">,</span>
  justifyContent<span class="token operator">:</span> <span class="token string">&#39;center&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">Container</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>p style<span class="token operator">=</span><span class="token punctuation">{</span>style<span class="token punctuation">}</span><span class="token operator">&gt;</span>test<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="componentprops-react元素描述类型" tabindex="-1"><a class="header-anchor" href="#componentprops-react元素描述类型" aria-hidden="true">#</a> ComponentProps（react元素描述类型）</h3><p>如果我们需要对组件或元素进行封装，<code>ComponentProps</code>类型会非常有用</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> ComponentProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">IButtonProps</span> <span class="token keyword">extends</span> <span class="token class-name">ComponentProps<span class="token operator">&lt;</span><span class="token string">&#39;button&#39;</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  a<span class="token operator">:</span> <span class="token string">&#39;small&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;large&#39;</span><span class="token punctuation">;</span>
  b<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">MyButton</span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token operator">:</span> IButtonProps<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>button <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> <span class="token operator">&gt;</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如我们对元素<code>button</code>进行封装，新增了两个属性<code>a</code>、<code>b</code>，通过接口继承<code>interface IButtonProps extends ComponentProps&lt;&#39;button&#39;&gt;</code>保证组件<code>MyButton</code>的属性能得到原生<code>botton</code>的属性和新增属性的类型检查</p><p><code>ComponentProps</code>的泛型坑位也可以传入组件类型来提取组件的属性</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">ISuperButtonProps</span> <span class="token keyword">extends</span> <span class="token class-name">ComponentProps<span class="token operator">&lt;</span><span class="token keyword">typeof</span> MyButton<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  c<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">SuperButton</span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token operator">:</span> ISuperButtonProps<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>MyButton a<span class="token operator">=</span><span class="token string">&quot;large&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>MyButton<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token operator">&lt;</span>SuperButton<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>SuperButton<span class="token operator">&gt;</span> <span class="token comment">// 报错：类型“{}”缺少类型“ISuperButtonProps”中的以下属性: c, ats(2739)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>能接受原生元素也能接受组件，我们看看内部构造</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ComponentProps<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">JSX</span><span class="token punctuation">.</span>IntrinsicElements <span class="token operator">|</span> JSXElementConstructor<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;&gt;</span></span> <span class="token operator">=</span>
    <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">JSXElementConstructor<span class="token operator">&lt;</span><span class="token keyword">infer</span> <span class="token constant">P</span><span class="token operator">&gt;</span></span>
        <span class="token operator">?</span> <span class="token constant">P</span>
        <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">JSX</span><span class="token punctuation">.</span>IntrinsicElements
            <span class="token operator">?</span> <span class="token constant">JSX</span><span class="token punctuation">.</span>IntrinsicElements<span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">]</span>
            <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>JSXElementConstructor</code>就是函数组件或类组件的类型，<code>JSX.IntrinsicElements</code>就是原生元素的类型</p><p>先判断传入的是否是组件元素，如果是返回参数类型。之后判断是否是原生元素，返回对应的类型</p><blockquote><p>在类组件或原生元素上可能会使用ref，react提供了增加ref和删除ref的两个内置类型，分别是<code>ComponentPropsWithRef</code>、<code>ComponentPropsWithoutRef</code>，用法和<code>ComponentProps</code>一致</p></blockquote><h3 id="reactelement-与-reactnode" tabindex="-1"><a class="header-anchor" href="#reactelement-与-reactnode" aria-hidden="true">#</a> ReactElement 与 ReactNode</h3><p>我们在函数组件声明中研究<code>FC</code>类型时提到了<code>FunctionComponent</code>和<code>PropsWithChildren</code>类型，其中分别返回<code>ReactElement</code>和<code>ReactNode</code>类型，为什么函数组件返回<code>ReactElement</code>类型而插槽返回<code>ReactNode</code>类型</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">PropsWithChildren<span class="token operator">&lt;</span><span class="token constant">P</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">P</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span> children<span class="token operator">?</span><span class="token operator">:</span> ReactNode <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">FunctionComponent<span class="token operator">&lt;</span><span class="token constant">P</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token punctuation">(</span>props<span class="token operator">:</span> <span class="token constant">P</span><span class="token punctuation">,</span> context<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> ReactElement<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,97),k=s("code",null,"react.createElement",-1),d=s("code",null,"JSX.Element",-1),v=s("code",null,"null",-1),m=s("code",null,'["", true, 123]',-1),b=s("code",null,"ReactNode",-1),g=s("code",null,"ReactElement",-1),y=a(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ReactChild</span> <span class="token operator">=</span> ReactElement <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">ReactFragment</span> <span class="token operator">=</span> Iterable<span class="token operator">&lt;</span>ReactNode<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">ReactNode</span> <span class="token operator">=</span> ReactElement <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> ReactFragment <span class="token operator">|</span> ReactPortal <span class="token operator">|</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="工程实践" tabindex="-1"><a class="header-anchor" href="#工程实践" aria-hidden="true">#</a> 工程实践</h2><blockquote><p>以下是某位大佬习惯使用的规范，我觉得还不错就直接抄下来了</p></blockquote><h3 id="项目中的类型声明文件" tabindex="-1"><a class="header-anchor" href="#项目中的类型声明文件" aria-hidden="true">#</a> 项目中的类型声明文件</h3><p>在实际应用中使用 TypeScript 进行开发时，我们往往需要大量的类型代码，而如何存放这些类型代码，其实就需要预先有一个明确的规范。目前我使用的方式是，在项目中使用一个专门的文件夹存放类型代码，其中又按照这些类型的作用进行了划分，其分布大致是这样的：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>PROJECT
├── src
│   ├── types
│   │   ├── shared.ts
│   │   ├── [biz].ts
│   │   ├── request.ts
│   │   ├── tool.ts
│   ├── typings.d.ts
└── tsconfig.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们来依次讲解下这些类型声明文件的作用：</p><ul><li><code>shared.ts</code>，被其他类型定义所使用的类型，如简单的联合类型封装、简单的结构工具类型等。</li><li><code>[biz].ts</code>，与业务逻辑对应的类型定义，比如<code>user.ts</code><code>module.ts</code>等，推荐的方式是在中大型项目中尽可能按照业务模型来进行细粒度的拆分。</li><li><code>request.ts</code>，请求相关的类型定义，推荐的方式是定义响应结构体，然后使用 biz 中的业务逻辑类型定义进行填充：</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> Status <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./shared&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">IRequestStruct<span class="token operator">&lt;</span>TData <span class="token operator">=</span> <span class="token builtin">never</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
    status<span class="token operator">:</span> Status<span class="token punctuation">;</span>
    code<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    data<span class="token operator">:</span> TData<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">IPaginationRequestStruct<span class="token operator">&lt;</span>TData <span class="token operator">=</span> <span class="token builtin">never</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
    status<span class="token operator">:</span> Status<span class="token punctuation">;</span>
    curPage<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    totalCount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    hasNextPage<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
    data<span class="token operator">:</span> TData<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际使用时：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> IPaginationRequestStruct <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@/types/request&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> IUserProfile <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@/types/user&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> fetchUserList<span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>IPaginationRequestStruct<span class="token operator">&lt;</span>IUserProfile<span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过这种方式，你的类型代定义之间就能够建立起清晰的、和业务逻辑一致的引用关系。</p><ul><li><code>tool.ts</code>，工具类型定义，一般是推荐把比较通用的工具类型抽离到专门的工具类型库中，这里只存放使用场景特殊的部分。</li><li><code>typings.d.ts</code>，全局的类型声明，包括非代码文件的导入、无类型 npm 包的类型声明、全局变量的类型定义等等，你也可以进一步拆分为 <code>env.d.ts</code> <code>runtime.d.ts</code> <code>module.d.ts</code> 等数个各司其职的声明文件。</li></ul><p>在实际场景中，这一规范的粒度并不一定能够满足你的需要，但你仍然可以按照这一思路进行类型定义的梳理和妥善放置。另外，我们并不需要将所有的类型定义都专门放到这个文件夹里，比如仅被组件自身消费的类型就应该使用就近原则，直接和组件代码一起即可。</p><h3 id="组件与组件类型" tabindex="-1"><a class="header-anchor" href="#组件与组件类型" aria-hidden="true">#</a> 组件与组件类型</h3><p>在 React 父子组件中一个常见的场景是，父组件导入各个子组件，传递属性时会进行额外的数据处理，其结果的类型被这多个子组件共享，而这个类型又仅被父子组件消费，不应当放在全局的类型定义中。此时我推荐的方式是，将这个类型定义在父组件中，子组件使用仅类型导入去导入这个类型，由于值空间与类型空间是隔离的，因此我们并不需要担心循环引用：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// Parent.tsx</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> ChildA <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./ChildA&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ChildB <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./ChildB&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ChildC <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./ChildC&quot;</span><span class="token punctuation">;</span>

<span class="token comment">//  被多个子组件消费的类型</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ISpecialDataStruct</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">Parent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> data<span class="token operator">:</span> ISpecialDataStruct <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>ChildA inputA<span class="token operator">=</span><span class="token punctuation">{</span>data<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>ChildB inputB<span class="token operator">=</span><span class="token punctuation">{</span>data<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>ChildC inputC<span class="token operator">=</span><span class="token punctuation">{</span>data<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// ChildA.tsx</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> ISpecialDataStruct <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./parent&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">IAProp</span> <span class="token punctuation">{</span>
  inputA<span class="token operator">:</span> ISpecialDataStruct<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> ChildA<span class="token operator">:</span> <span class="token constant">FC</span><span class="token operator">&lt;</span>IAProp<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>我们学习了函数组件相关类型，在某些场景写<code>FC</code>类型并不是完美的需要做取舍。内置方法的泛型坑位，更有效约束返回值或传参。内置类型，更精准描述事件、css、元素。以及在工程上的一套规范。需要完全掌握还是要反复练习增加熟练度才能让项目更加坚固。</p>`,19);function f(w,h){const e=i("RouterLink");return p(),o("div",null,[u,s("p",null,[n("我们需要先搞清楚什么是"),c(e,{to:"/nav.react/%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86.html#react%E5%85%83%E7%B4%A0"},{default:l(()=>[n("react元素和react节点")]),_:1}),n("，react元素是能通过"),k,n("或者JSX创建的元素（"),d,n("），react节点是渲染时参照的对象，是可以渲染"),v,n("、"),m,n("的，类型上"),b,n("是包含"),g,n("的，其类型定义如下")]),y])}const R=t(r,[["render",f],["__file","0.React中的TS集成.html.vue"]]);export{R as default};
