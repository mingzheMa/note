import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as p,c as o,a as c,b as n,e as a,w as e,d as l,r as i}from"./app.9ac9284b.js";const r={},d=l(`<h1 id="内置工具" tabindex="-1"><a class="header-anchor" href="#内置工具" aria-hidden="true">#</a> 内置工具</h1><p>TS提供了一些全局的内置工具，大致分几类</p><ul><li><strong>属性修饰工具</strong>，对属性的修饰，包括对象或数组属性的可选必选，可读可写</li><li><strong>结构工具</strong>，对类型进行剪裁拼接得到一个新的类型</li><li><strong>集合工具</strong>，对集合的处理，交、差。并、补集</li><li><strong>模式匹配工具</strong>，基于<code>infer</code>模式匹配，对类型提取操作</li><li><strong>字符串工具</strong>，对字符串类型进行操作</li></ul><h2 id="属性修饰工具" tabindex="-1"><a class="header-anchor" href="#属性修饰工具" aria-hidden="true">#</a> 属性修饰工具</h2><ul><li><code>Partial</code>，赋予类型可选属性</li><li><code>Required</code>，赋予类型必选属性</li><li><code>Readonly</code>，赋予类型只读属性</li></ul><blockquote><p>以上工具内部会对传入的泛型进行映射，如果传入非对象数组的类型则直接返回</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Obj</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  c<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  <span class="token keyword">readonly</span> d<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">readonly</span> f<span class="token operator">:</span> <span class="token string">&quot;f&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">Arr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token operator">?</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 将属性变为可选</span>
<span class="token comment">// type test1 = {</span>
<span class="token comment">//   a?: string | undefined;</span>
<span class="token comment">//   b?: number | undefined;</span>
<span class="token comment">//   c?: boolean | undefined;</span>
<span class="token comment">//   readonly d?: &quot;d&quot; | undefined;</span>
<span class="token comment">//   readonly f?: &quot;f&quot; | undefined;</span>
<span class="token comment">// };</span>
<span class="token keyword">type</span> <span class="token class-name">test1</span> <span class="token operator">=</span> Partial<span class="token operator">&lt;</span>Obj<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// type test11 = [(number | undefined)?, (string | undefined)?, (boolean | undefined)?]</span>
<span class="token keyword">type</span> <span class="token class-name">test11</span> <span class="token operator">=</span> Partial<span class="token operator">&lt;</span>Arr<span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token comment">// 将属性变为必选</span>
<span class="token comment">// type test2 = {</span>
<span class="token comment">//   a: string;</span>
<span class="token comment">//   b: number;</span>
<span class="token comment">//   c: boolean;</span>
<span class="token comment">//   readonly d: &quot;d&quot;;</span>
<span class="token comment">//   readonly f: &quot;f&quot;;</span>
<span class="token comment">// };</span>
<span class="token keyword">type</span> <span class="token class-name">test2</span> <span class="token operator">=</span> Required<span class="token operator">&lt;</span>Obj<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// type test21 = [number, string, boolean]</span>
<span class="token keyword">type</span> <span class="token class-name">test21</span> <span class="token operator">=</span> Required<span class="token operator">&lt;</span>Arr<span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token comment">// 将属性变为只读</span>
<span class="token comment">// type test3 = {</span>
<span class="token comment">//   readonly a: string;</span>
<span class="token comment">//   readonly b: number;</span>
<span class="token comment">//   readonly c?: boolean | undefined;</span>
<span class="token comment">//   readonly d?: &quot;d&quot; | undefined;</span>
<span class="token comment">//   readonly f: &quot;f&quot;;</span>
<span class="token comment">// };</span>
<span class="token keyword">type</span> <span class="token class-name">test3</span> <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span>Obj<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token comment">// type test31 = readonly [number, (string | undefined)?, (boolean | undefined)?]</span>
<span class="token keyword">type</span> <span class="token class-name">test31</span> <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span>Arr<span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>三种工具均可以对数组对象进行属性修饰，我们看下内部实现</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Partial<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">Required<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">Readonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>都是讲传入类型映射并添加对应的修饰符，<code>-?</code>表示如果类型有<code>?</code>直接去除，例如<code>{a?:string}</code> =&gt; <code>{a:string}</code></p><h2 id="结构工具" tabindex="-1"><a class="header-anchor" href="#结构工具" aria-hidden="true">#</a> 结构工具</h2><ul><li><code>Record&lt;K, V&gt;</code>，根据传入泛型返回一个对象类型，键和值分别为<code>K</code>和<code>V</code>类型</li><li><code>Pick&lt;Obj, K&gt;</code>，筛选传入<code>Obj</code>类型中键为<code>K</code>类型，返回对象类型</li><li><code>Omit&lt;Obj, K&gt;</code>，筛选传入<code>Obj</code>类型中键不为<code>K</code>类型，返回对象类型</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Obj</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  c<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  <span class="token keyword">readonly</span> d<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">readonly</span> f<span class="token operator">:</span> <span class="token string">&quot;f&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// type test1 = {</span>
<span class="token comment">//   [x: string]: number;</span>
<span class="token comment">// }</span>
<span class="token keyword">type</span> <span class="token class-name">test1</span> <span class="token operator">=</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token comment">// type test2 = {</span>
<span class="token comment">//   readonly d?: &quot;d&quot; | undefined;</span>
<span class="token comment">//   a: string;</span>
<span class="token comment">// }</span>
<span class="token keyword">type</span> <span class="token class-name">test2</span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>Obj<span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;d&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token comment">// type test3 = {</span>
<span class="token comment">//   readonly f: &quot;f&quot;;</span>
<span class="token comment">//   b: number;</span>
<span class="token comment">//   c?: boolean | undefined;</span>
<span class="token comment">// }</span>
<span class="token keyword">type</span> <span class="token class-name">test3</span> <span class="token operator">=</span> Omit<span class="token operator">&lt;</span>Obj<span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;d&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们看下内部实现</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">Record<span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">Omit<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> Exclude<span class="token operator">&lt;</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">Exclude<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Pick</code>和<code>Record</code>都比较好理解，<code>Omit</code>实际上是基于<code>Pick</code>实现的，先通过<code>Exclude</code>获取传入对象泛型<code>T</code>中非泛型<code>K</code>的键类型，在通过<code>Pick</code>提取对象泛型<code>T</code>元素</p><h2 id="集合工具" tabindex="-1"><a class="header-anchor" href="#集合工具" aria-hidden="true">#</a> 集合工具</h2><ul><li><code>Extract</code>，联合类型交集</li><li><code>Exclude</code>，联合类型差集</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">4</span><span class="token punctuation">;</span>

<span class="token comment">// 1 | 2</span>
<span class="token keyword">type</span> <span class="token class-name">test1</span> <span class="token operator">=</span> Extract<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token operator">&gt;</span>
<span class="token comment">// 1 | 2</span>
<span class="token keyword">type</span> <span class="token class-name">test2</span> <span class="token operator">=</span> Extract<span class="token operator">&lt;</span><span class="token constant">B</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">&gt;</span>
<span class="token comment">// 3</span>
<span class="token keyword">type</span> <span class="token class-name">test3</span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token operator">&gt;</span>
<span class="token comment">// 4</span>
<span class="token keyword">type</span> <span class="token class-name">test4</span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span><span class="token constant">B</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>交集是永远一样的，而差集不一定</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Exclude<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">Extract<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到内部实际上是利用了分布条件类型系统进行匹配</p><h2 id="匹配工具和字符串工具" tabindex="-1"><a class="header-anchor" href="#匹配工具和字符串工具" aria-hidden="true">#</a> 匹配工具和字符串工具</h2>`,23);function k(u,m){const s=i("RouterLink");return p(),o("div",null,[d,c("p",null,[n("我们单独抽出说明，包含内置工具类型和工具类型拓展，"),a(s,{to:"/nav.TS/0.infer%E5%85%B3%E9%94%AE%E5%AD%97.html"},{default:e(()=>[n("匹配工具")]),_:1}),n("、"),a(s,{to:"/nav.TS/0.%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B7%A5%E5%85%B7.html"},{default:e(()=>[n("字符串工具")]),_:1})])])}const y=t(r,[["render",k],["__file","0.内置工具.html.vue"]]);export{y as default};
