import{_ as s}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as n,c as a,d as e}from"./app.9ac9284b.js";const p={},t=e(`<h1 id="类型层级" tabindex="-1"><a class="header-anchor" href="#类型层级" aria-hidden="true">#</a> 类型层级</h1><ul><li>Top Type：any、unknown</li><li>顶级类型：Object</li><li>装箱类型：String、Number ...</li><li>基本类型：object、string、number ...</li><li>字面量类型：{}、&quot;我是一个字符串&quot;、123 ...</li><li>Bottom Type：never</li></ul><p>注意：其中联合类型比较特殊，具体看怎么声明，例如：</p><ul><li>&#39;linbudu&#39; | &#39;budulin&#39; extends string 成立</li><li>&#39;linbudu&#39; | true extends string 不成立</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">VerboseTypeChain</span> <span class="token operator">=</span> <span class="token builtin">never</span> <span class="token keyword">extends</span> <span class="token string">&#39;linbudu&#39;</span> <span class="token comment">// naver是类型层级的最底层</span>
  <span class="token operator">?</span> <span class="token string">&#39;linbudu&#39;</span> <span class="token keyword">extends</span> <span class="token string">&#39;linbudu&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;budulin&#39;</span> <span class="token comment">// 字面量类型 &lt; 同个字面量联合类型</span>
  <span class="token operator">?</span> <span class="token string">&#39;linbudu&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;budulin&#39;</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span> <span class="token comment">// 同个字面量联合类型 &lt; 同个基本类型</span>
  <span class="token operator">?</span> <span class="token builtin">string</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// extends {} 是从结构化角度出发的，string类型可以看做是一个{}空对象中拓展了一些方法，所以这里是成立的</span>
  <span class="token operator">?</span> <span class="token builtin">string</span> <span class="token keyword">extends</span> <span class="token class-name">String</span> <span class="token comment">// 基本类型 &lt; 装箱类型（装箱类型还包括null、undefined等，如果你尝试null extends String不成立，其实原理同上，是从结构化角度出发的）</span>
  <span class="token operator">?</span> String <span class="token keyword">extends</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 同 extends {}</span>
  <span class="token operator">?</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">extends</span> <span class="token class-name">object</span> <span class="token comment">// {} extends 是从类型信息层面出发，{}此时表示一个字面量</span>
  <span class="token operator">?</span> object <span class="token keyword">extends</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 同 extends {}</span>
  <span class="token operator">?</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">extends</span> <span class="token class-name">Object</span> <span class="token comment">// 同 {} extends</span>
  <span class="token operator">?</span> Object <span class="token keyword">extends</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 同 extends {}</span>
  <span class="token operator">?</span> object <span class="token keyword">extends</span> <span class="token class-name">Object</span> <span class="token comment">// object extends 从信息层面出发，基本类型 &lt; 装箱类型</span>
  <span class="token operator">?</span> Object <span class="token keyword">extends</span> <span class="token class-name">object</span> <span class="token comment">// extends object 从类型结构出发，Object 本质也是 object 并兼容其他类型</span>
  <span class="token operator">?</span> Object <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">any</span></span> <span class="token comment">// 装箱类型 &lt; Top Type</span>
  <span class="token operator">?</span> Object <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">unknown</span></span> <span class="token comment">// 装箱类型 &lt; Top Type</span>
  <span class="token operator">?</span> <span class="token builtin">any</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">unknown</span></span> <span class="token comment">// any 类型是可以接收和赋值给各个类型的。unknown是可以接受各个类型，但只能赋值any和自身类型。所以这里成立</span>
  <span class="token operator">?</span> <span class="token builtin">unknown</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">any</span></span> <span class="token comment">// 同上</span>
  <span class="token operator">?</span> <span class="token number">8</span>
  <span class="token operator">:</span> <span class="token number">7</span>
  <span class="token operator">:</span> <span class="token number">6</span>
  <span class="token operator">:</span> <span class="token number">5</span>
  <span class="token operator">:</span> <span class="token number">4</span>
  <span class="token operator">:</span> <span class="token number">3</span>
  <span class="token operator">:</span> <span class="token number">2</span>
  <span class="token operator">:</span> <span class="token number">1</span>
  <span class="token operator">:</span> <span class="token number">0</span>
  <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span>
  <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">2</span>
  <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">3</span>
  <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">4</span>
  <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">5</span>
  <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">6</span>
  <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">7</span>
  <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">8</span>

<span class="token comment">// type VerboseTypeChain = 8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),o=[t];function l(c,r){return n(),a("div",null,o)}const d=s(p,[["render",l],["__file","0.类型层级.html.vue"]]);export{d as default};
