import{_ as s}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as n,c as a,d as t}from"./app.9ac9284b.js";const p={},e=t(`<h1 id="实现pick和omit函数对属性值提取" tabindex="-1"><a class="header-anchor" href="#实现pick和omit函数对属性值提取" aria-hidden="true">#</a> 实现Pick和Omit函数对属性值提取</h1><p>先判断值是否属于传入的类型，在通过索引类型查询获取所有key的类型，注意never是获取不到的</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">myPick<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token constant">V</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>key <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">V</span></span> <span class="token operator">?</span> key <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">myOmit<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token constant">V</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>key <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">V</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> key <span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 这里只演示pick</span>
<span class="token keyword">type</span> <span class="token class-name">obj</span> <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> c<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">a</span> <span class="token operator">=</span> myPick<span class="token operator">&lt;</span>obj<span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// a | c</span>
<span class="token keyword">type</span> <span class="token class-name">b</span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>obj<span class="token punctuation">,</span> a<span class="token operator">&gt;</span> <span class="token comment">// {a: string;c: string;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想把这两个函数合二为一通过参数控制呢</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">StrictConditional<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token punctuation">,</span> Resolve<span class="token punctuation">,</span> Reject<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">A</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">B</span></span>
  <span class="token operator">?</span> <span class="token constant">B</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A</span></span>
    <span class="token operator">?</span> Resolve
    <span class="token operator">:</span> Reject
  <span class="token operator">:</span> Reject<span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">StrictValueTypeFilter<span class="token operator">&lt;</span>
  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  ValueType<span class="token punctuation">,</span>
  Positive <span class="token keyword">extends</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>key <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> StrictConditional<span class="token operator">&lt;</span>
    <span class="token constant">T</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span>
    ValueType<span class="token punctuation">,</span>
    Positive <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> key <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">,</span>
    Positive <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> key
  <span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">obj</span> <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> c<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">a</span> <span class="token operator">=</span> StrictValueTypeFilter<span class="token operator">&lt;</span>obj<span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// b</span>
<span class="token keyword">type</span> <span class="token class-name">b</span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>obj<span class="token punctuation">,</span> a<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// {b:string}</span>
<span class="token keyword">type</span> <span class="token class-name">c</span> <span class="token operator">=</span> StrictValueTypeFilter<span class="token operator">&lt;</span>obj<span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// a | c</span>
<span class="token keyword">type</span> <span class="token class-name">d</span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>obj<span class="token punctuation">,</span> c<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// {a:string, c:string}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们来解释一下每个类型别名的作用</p><ul><li><code>StrictValueTypeFilter</code>接收泛型T（目标对象）、ValueType（需要操作的类型）、Positive（是否正选），接着将每一项的值丢给<code>StrictConditional</code>处理，之后通过索引取值的方式（[keyof T]）将非never的类型取出</li><li><code>StrictConditional</code>是用来对比T（目标对象）、ValueType（需要操作的类型）是否匹配，并根据传入泛型的Resolve（匹配成功）、Reject（匹配失败）判断类型，这里判断匹配时（A extends B和B extends A），是因为在联合类型下单方面匹配是会触发分流条件的（例如：1 | 2 extends 1 | 2 | 3），即使排除裸类型的情况也不行（例如：[1 | 2] extends [1 | 2 | 3]）</li></ul>`,7),o=[e];function c(l,i){return n(),a("div",null,o)}const u=s(p,[["render",c],["__file","104.实现Pick和Omit函数对属性值提取.html.vue"]]);export{u as default};
